swagger: '2.0'
security:
  - basicAuth: []
securityDefinitions:
  basicAuth:
    type: basic
tags:
  - name: Collection
  - name: Converter
  - name: Crawler
  - name: Dataset
  - name: DocumentExport
  - name: Enrichment
  - name: Exploration
  - name: FileResource
  - name: Group
  - name: Importer
  - name: Labeler
  - name: Migration
  - name: NLP
  - name: Ranker
  - name: SimilarDocumentRanker
  - name: System
  - name: User
info:
  description: |
    Authentication methods
    - Basic Auth
    - JSON Web Token
      - [POST /api/v1/usermgmt/login](#!/User/signinUser)
      - [POST /api/v1/usermgmt/logout](#!/User/doLogout)
    - Python client sample [Download](/docs/wex-python-api.zip)
  title: WEX REST APIs
  version: 12.0.3.935
paths:
  /api/v1/collections:
    get:
      description: Display a list of existing collections.
      operationId: Collection_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseCollection'
      summary: List collections
      tags:
        - Collection
    post:
      description: Creates a new collection.
      consumes:
        - application/json
      operationId: Collection_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Collection'
      produces:
        - application/json
      responses:
        '200':
          description: Collection successfully created.
          schema:
            $ref: '#/definitions/Collection'
      summary: Create a collection
      tags:
        - Collection
  '/api/v1/collections/{collectionId}':
    delete:
      summary: Delete a collection
      description: Deletes an existing collection.
      operationId: Collection_delete
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Collection successfully deleted.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
    get:
      summary: List collection details
      description: Display detailed information about an existing collection.
      operationId: Collection_get
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Collection successfully retrieved.
          schema:
            $ref: '#/definitions/Collection'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
    put:
      summary: Update a collection
      description: Updates an existing collection.
      consumes:
        - application/json
      operationId: Collection_update
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Collection'
      produces:
        - application/json
      responses:
        '200':
          description: Collection successfully updated.
          schema:
            $ref: '#/definitions/Collection'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
  /api/v1/collections/status:
    get:
      description: Display status information about all existing collections.
      operationId: Collection_statusAll
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListCollectionStatus'
      summary: List status for all collections
      tags:
        - Collection
    parameters: []
  '/api/v1/collections/{collectionId}/indexing':
    get:
      summary: Get indexing status
      description: Check if indexing is enabled.
      operationId: Collection_isIndexingEnabled
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IndexingConfig'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
    put:
      summary: Change indexing status
      description: Enable or disable indexing on an existing collection.
      operationId: Collection_setIndexingEnabled
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/IndexingConfig'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IndexingConfig'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
  '/api/v1/collections/{collectionId}/rebuild':
    post:
      summary: Request rebuild index
      description: Request an index rebuild on an existing collection.
      operationId: Collection_rebuild
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
  '/api/v1/collections/{collectionId}/exploration/reload':
    get:
      summary: Reload the indexing and exploration runtime engine
      description: Request an indexing and exploration reload for an existing collection. Configuration change will be reflected.
      operationId: Collection_exploration_reload
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Collection
  '/api/v1/collections/{collectionId}/status':
    get:
      summary: List collection status
      description: Display status information about an existing collection.
      operationId: Collection_status
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/CollectionStatus'
      tags:
        - Collection
    parameters: []
  '/api/v1/collections/{collectionId}/analyze':
    parameters: []
    post:
      operationId: analyze
      summary: Analyze documents with enrichments of a specified collection
      description: >-
        Real-time NLP allows users to analyze their documents with enrichments
        of a specified collection. Results describe enriched document that will
        be stored when indexed (not during the call of this API).
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: body
          name: document
          description: |
            Set a document to analyze. Document has two fields, **fields** and metadata. You only need to deal with **fields** for analysis. Fields holds key-value pairs that a text or string value is associated with a field name of dataset used by a collection. Note that annotators will be processed basically against **analyzable** **text** **content** **fields**, which can be checked in enrichFieldGroups of collection configuration or in collection edition UI. The other types of fields can be used for another purpose. For example, a classifier can use those fields when it uses such fields as features.
          schema:
            $ref: '#/definitions/NLPDocument'
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/RichDocument'
          examples:
            id: 'null'
            tag: 'null'
            removed: false
            metadata: {}
            enriched:
              body:
                - text: >-
                    IBM Watson Explorer is a cognitive search and content
                    analysis platform that enables you to gain insights from
                    your data.
                  properties:
                    sentiment_negative: 0
                    sentiment_positive: 0
                    lang: en
                  features: []
                  annotations:
                    - id: a4e5e67b-c810-466b-99b5-fc17000f7b1a
                      type: ._phrase.noun_phrase.nouns
                      text: IBM Watson Explorer
                      beginIndex: 0
                      endIndex: 19
                      properties:
                        facetpath: ._phrase.noun_phrase.nouns
                        facetval: IBM Watson explorer
                    - id: e3e90ef6-2a01-4903-91a0-5f95fb35076a
                      type: ._word.noun.general
                      text: IBM
                      beginIndex: 0
                      endIndex: 3
                      properties:
                        facetpath: ._word.noun.general
                        facetval: IBM
                    - id: 3dbf7d7d-b9d2-1180-0000-356634ea2b12
                      type: uima.tt.SentenceAnnotation
                      text: >-
                        IBM Watson Explorer is a cognitive search and content analysis
                        platform that enables you to gain insights from your data.
                      beginIndex: 0
                      endIndex: 121
                      properties:
                        marker: SENTENCE
                    - id: 6241965f-ed2f-42a8-b9aa-3e37ebc71fbe
                      type: ._word.noun.general
                      text: Watson
                      beginIndex: 4
                      endIndex: 10
                      properties:
                        facetpath: ._word.noun.general
                        facetval: Watson
                    - id: a2dd9eee-4ae8-41e4-ad07-578b7b317ed9
                      type: ._word.noun.general
                      text: Explorer
                      beginIndex: 11
                      endIndex: 19
                      properties:
                        facetpath: ._word.noun.general
                        facetval: explorer
                    - id: c4f8f7a1-274b-41f3-9910-412184c7644c
                      type: ._word.verb
                      text: is
                      beginIndex: 20
                      endIndex: 22
                      properties:
                        facetpath: ._word.verb
                        facetval: be
                    - id: 421043c0-dd9d-4b89-a037-641323f3229f
                      type: ._word.adv
                      text: a
                      beginIndex: 23
                      endIndex: 24
                      properties:
                        facetpath: ._word.adv
                        facetval: a
                    - id: 5f0186f6-e20e-40a1-b366-7ff0405420f8
                      type: ._phrase.noun_phrase.mod_noun
                      text: cognitive search
                      beginIndex: 25
                      endIndex: 41
                      properties:
                        facetpath: ._phrase.noun_phrase.mod_noun
                        facetval: cognitive ... search
                    - id: a2050050-f0f0-4414-b7aa-735bfbb6035a
                      type: ._word.adj
                      text: cognitive
                      beginIndex: 25
                      endIndex: 34
                      properties:
                        facetpath: ._word.adj
                        facetval: cognitive
                    - id: d2351ade-9c08-4f5f-aaec-cd568722f61f
                      type: ._word.noun.general
                      text: search
                      beginIndex: 35
                      endIndex: 41
                      properties:
                        facetpath: ._word.noun.general
                        facetval: search
                    - id: d32933ad-899a-43fc-90b0-95d1edfdfe01
                      type: ._word.conj
                      text: and
                      beginIndex: 42
                      endIndex: 45
                      properties:
                        facetpath: ._word.conj
                        facetval: and
                    - id: f9a66903-8126-42ed-9de9-faf62a89ea06
                      type: ._phrase.noun_phrase.nouns
                      text: content analysis platform
                      beginIndex: 46
                      endIndex: 71
                      properties:
                        facetpath: ._phrase.noun_phrase.nouns
                        facetval: content analysis platform
                    - id: d4bad2d8-063c-4a14-951a-feb47294762d
                      type: ._word.noun.general
                      text: content
                      beginIndex: 46
                      endIndex: 53
                      properties:
                        facetpath: ._word.noun.general
                        facetval: content
                    - id: a24a829c-a927-41e1-ab6c-4aea9d63e755
                      type: ._word.noun.general
                      text: analysis
                      beginIndex: 54
                      endIndex: 62
                      properties:
                        facetpath: ._word.noun.general
                        facetval: analysis
                    - id: 1df9037b-3c59-453a-afd7-519fc52a64fb
                      type: ._word.noun.general
                      text: platform
                      beginIndex: 63
                      endIndex: 71
                      properties:
                        facetpath: ._word.noun.general
                        facetval: platform
                    - id: 882879fd-dea5-46f5-9c8b-4233c6aab581
                      type: ._word.verb
                      text: enables
                      beginIndex: 77
                      endIndex: 84
                      properties:
                        facetpath: ._word.verb
                        facetval: enable
                    - id: 21b4d4ca-24a8-4816-bf36-86059b13ab51
                      type: ._phrase.pred_phrase.verb_noun
                      text: gain insights
                      beginIndex: 92
                      endIndex: 105
                      properties:
                        facetpath: ._phrase.pred_phrase.verb_noun
                        facetval: gain ... insight
                    - id: d57e2684-5e0c-4ed1-82a7-6947f31be20c
                      type: ._word.verb
                      text: gain
                      beginIndex: 92
                      endIndex: 96
                      properties:
                        facetpath: ._word.verb
                        facetval: gain
                    - id: ba1b9c0f-f61e-4167-8811-f45e7ed01255
                      type: ._word.noun.general
                      text: insights
                      beginIndex: 97
                      endIndex: 105
                      properties:
                        facetpath: ._word.noun.general
                        facetval: insight
                    - id: 8ae0987a-a83b-4f51-afe0-ca1151ff6e3a
                      type: ._word.noun.general
                      text: data
                      beginIndex: 116
                      endIndex: 120
                      properties:
                        facetpath: ._word.noun.general
                        facetval: data
              content:
                - text: >-
                    Watson Explorer introduces oneWEX, a truly unified
                    architecture that combines both exploration and content
                    analytics.
                  properties:
                    sentiment_negative: 0
                    sentiment_positive: 0
                    lang: en
                  features: []
                  annotations:
                    - id: 3dbf7d7d-b9d2-1180-0000-016634ea2b28
                      type: ._phrase.noun_phrase.nouns
                      text: Watson Explorer
                      beginIndex: 0
                      endIndex: 15
                      properties:
                        facetpath: ._phrase.noun_phrase.nouns
                        facetval: Watson explorer
                    - id: 3dbf7d7d-b9d2-1180-0000-056634ea2b28
                      type: ._word.noun.general
                      text: Watson
                      beginIndex: 0
                      endIndex: 6
                      properties:
                        facetpath: ._word.noun.general
                        facetval: Watson
                    - id: 3dbf7d7d-b9d2-1180-0000-056634ea2b29
                      type: uima.tt.SentenceAnnotation
                      text: >-
                        Watson Explorer introduces oneWEX, a truly unified
                        architecture that combine sboth exploration and content
                        analytics.
                      beginIndex: 0
                      endIndex: 117
                      properties:
                        marker: SENTENCE
                    - id: 3dbf7d7d-b9d2-1180-0000-096634ea2b28
                      type: ._phrase.pred_phrase.noun_pred
                      text: Explorer introduces
                      beginIndex: 7
                      endIndex: 26
                      properties:
                        facetpath: ._phrase.pred_phrase.noun_pred
                        facetval: explorer ... introduce
                    - id: 3dbf7d7d-b9d2-1180-0000-0d6634ea2b28
                      type: ._word.noun.general
                      text: Explorer
                      beginIndex: 7
                      endIndex: 15
                      properties:
                        facetpath: ._word.noun.general
                        facetval: explorer
                    - id: 3dbf7d7d-b9d2-1180-0000-116634ea2b28
                      type: ._phrase.pred_phrase.verb_noun
                      text: introduces oneWEX
                      beginIndex: 16
                      endIndex: 33
                      properties:
                        facetpath: ._phrase.pred_phrase.verb_noun
                        facetval: introduce ... oneWEX
                    - id: 3dbf7d7d-b9d2-1180-0000-156634ea2b28
                      type: ._word.verb
                      text: introduces
                      beginIndex: 16
                      endIndex: 26
                      properties:
                        facetpath: ._word.verb
                        facetval: introduce
                    - id: 3dbf7d7d-b9d2-1180-0000-196634ea2b28
                      type: ._word.noun.others
                      text: oneWEX
                      beginIndex: 27
                      endIndex: 33
                      properties:
                        facetpath: ._word.noun.others
                        facetval: oneWEX
                    - id: 3dbf7d7d-b9d2-1180-0000-1d6634ea2b28
                      type: ._word.adv
                      text: a
                      beginIndex: 35
                      endIndex: 36
                      properties:
                        facetpath: ._word.adv
                        facetval: a
                    - id: 3dbf7d7d-b9d2-1180-0000-216634ea2b28
                      type: ._word.adv
                      text: truly
                      beginIndex: 37
                      endIndex: 42
                      properties:
                        facetpath: ._word.adv
                        facetval: truly
                    - id: 3dbf7d7d-b9d2-1180-0000-256634ea2b28
                      type: ._phrase.pred_phrase.verb_noun
                      text: unified architecture
                      beginIndex: 43
                      endIndex: 63
                      properties:
                        facetpath: ._phrase.pred_phrase.verb_noun
                        facetval: unify ... architecture
                    - id: 3dbf7d7d-b9d2-1180-0000-296634ea2b28
                      type: ._word.verb
                      text: unified
                      beginIndex: 43
                      endIndex: 50
                      properties:
                        facetpath: ._word.verb
                        facetval: unify
                    - id: 3dbf7d7d-b9d2-1180-0000-2d6634ea2b28
                      type: ._word.noun.general
                      text: architecture
                      beginIndex: 51
                      endIndex: 63
                      properties:
                        facetpath: ._word.noun.general
                        facetval: architecture
                    - id: 3dbf7d7d-b9d2-1180-0000-316634ea2b28
                      type: ._word.verb
                      text: combines
                      beginIndex: 69
                      endIndex: 77
                      properties:
                        facetpath: ._word.verb
                        facetval: combine
                    - id: 3dbf7d7d-b9d2-1180-0000-356634ea2b28
                      type: ._word.conj
                      text: both
                      beginIndex: 78
                      endIndex: 82
                      properties:
                        facetpath: ._word.conj
                        facetval: both
                    - id: 3dbf7d7d-b9d2-1180-0000-396634ea2b28
                      type: ._word.noun.general
                      text: exploration
                      beginIndex: 83
                      endIndex: 94
                      properties:
                        facetpath: ._word.noun.general
                        facetval: exploration
                    - id: 3dbf7d7d-b9d2-1180-0000-3d6634ea2b28
                      type: ._word.conj
                      text: and
                      beginIndex: 95
                      endIndex: 98
                      properties:
                        facetpath: ._word.conj
                        facetval: and
                    - id: 3dbf7d7d-b9d2-1180-0000-416634ea2b28
                      type: ._phrase.noun_phrase.nouns
                      text: content analytics
                      beginIndex: 99
                      endIndex: 116
                      properties:
                        facetpath: ._phrase.noun_phrase.nouns
                        facetval: content analytics
                    - id: 3dbf7d7d-b9d2-1180-0000-456634ea2b28
                      type: ._word.noun.general
                      text: content
                      beginIndex: 99
                      endIndex: 106
                      properties:
                        facetpath: ._word.noun.general
                        facetval: content
                    - id: 3dbf7d7d-b9d2-1180-0000-016634ea2b29
                      type: ._word.noun.general
                      text: analytics
                      beginIndex: 107
                      endIndex: 116
                      properties:
                        facetpath: ._word.noun.general
                        facetval: analytics
            stored:
              __sentiment_score__:
                - NEUTRAL
      tags:
        - NLP
  /api/v1/converter/types:
    get:
      summary: List converter types
      description: Display a list of available converter types.
      operationId: Converter_getTypes
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseConfigurationType'
      tags:
        - Converter
  '/api/v1/converter/types/{converterType}':
    get:
      summary: List converter configuration
      description: Displays a list of configuration parameter of converter.
      operationId: Converter_getConfigurationTemplate
      parameters:
        - in: path
          name: converterType
          description: The type of converter.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ConfigurationTemplate'
      tags:
        - Converter
    parameters: []
  /api/v1/crawler/subspaces:
    parameters: []
    post:
      consumes:
        - application/json
      operationId: discoverSubspaces
      summary: Discover subspaces
      description: >-
        Discover subspaces available for the crawler with the provided path /
        filter.
      parameters:
        - in: query
          name: path
          required: false
          type: string
        - in: query
          name: filters
          required: false
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ListDiscoveredSubspaces'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
      tags:
        - Crawler
  /api/v1/crawler/types:
    get:
      operationId: Crawler_getTypes
      summary: Get a list of crawler types
      description: Get a list of available crawler types.
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ListResponseConfigurationType'
          examples:
            items:
              - name: ac-crawler-seed-jdbccrawler
                label: JDBC database
              - name: ac-crawler-seed-unixfscrawler
                label: UNIX file system
              - name: ac-crawler-seed-web
                label: Web
              - name: fc-crawler-seed-box-connector
                label: Box
      tags:
        - Crawler
    parameters: []
  '/api/v1/crawler/types/{crawlerTypeName}':
    get:
      description: Get a crawler template
      summary: Get a crawler template for a specified cralwer type
      operationId: Crawler_getTemplate
      parameters:
        - in: path
          name: crawlerTypeName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ConfigurationTemplate'
      tags:
        - Crawler
    parameters: []
  /api/v1/datasets:
    get:
      summary: List datasets
      description: Display a list of existing datasets.
      operationId: Dataset_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseDataset'
      tags:
        - Dataset
    post:
      summary: Create a dataset
      description: Creates a new dataset.
      consumes:
        - application/json
      operationId: Dataset_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Dataset'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/Dataset'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
      tags:
        - Dataset
  /api/v1/system/usage:
    get:
      summary: Get system usage
      description: Display system usage information.
      operationId: System_getUsage
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SystemUsage'
      tags:
        - System
  /api/v1/system/logs:
    get:
      summary: Get logs in JSON format.
      description: Get formatted system and audit logs.
      operationId: System_getLogs
      parameters:
        - in: query
          name: type
          description: Type of logs
          type: string
          enum:
            - log
            - audit
          default: log
          required: false
        - in: query
          name: filter
          description: Filter logs by user
          type: string
          enum:
            - all
            - user
            - system
          default: all
          required: false
        - in: query
          name: from
          description: 'Oldest logs in epoch time [ms]'
          type: integer
          format: int64
          required: false
        - in: query
          name: to
          description: 'Latest logs in epoch time [ms]'
          type: integer
          format: int64
          required: false
        - in: query
          name: offset
          description: Offset of first log records in the result
          type: integer
          required: false
          minimum: 0
        - in: query
          name: size
          description: Maximum size of the records
          type: integer
          required: false
          minimum: 1
          maximum: 100
        - in: query
          name: level
          description: Returned log with level equal or above this level
          type: string
          required: false
          default: INFO
          enum:
            - INFO
            - WARNING
            - SEVERE
        - in: query
          name: order
          description: Sort order of the returned log record
          type: string
          required: false
          default: asc
          enum:
            - asc
            - ascending
            - desc
            - descending
      responses:
        '200':
          description: Service log in JSON
          schema:
            $ref: '#/definitions/LogRecords'
      tags:
        - System
  /api/v1/system/logs/download:
    get:
      summary: Get logs in CSV format.
      description: Get formatted system and audit logs in CSV format.
      operationId: System_downloadLogs
      parameters:
        - in: query
          name: type
          description: Type of logs
          type: string
          enum:
            - log
            - audit
            - all
          default: log
          required: false
        - in: query
          name: filter
          description: Filter logs by user
          type: string
          enum:
            - all
            - user
            - system
          default: all
          required: false
        - in: query
          name: from
          description: 'Oldest logs in epoch time [ms]'
          type: integer
          format: int64
          required: false
        - in: query
          name: to
          description: 'Latest logs in epoch time [ms]'
          type: integer
          format: int64
          required: false
      produces:
        - application/octet-stream
      responses:
        '200':
          description: Zipped CSV files
      tags:
        - System
  /api/v1/system/logs/service:
    get:
      summary: Download service logs for IBM support.
      description: Download logs and system info in zip format.
      operationId: System_downloadServiceLogs
      parameters:
        - in: query
          name: core
          description: Set <code>true</code> to include "core.*"
          type: boolean
          required: false
        - in: query
          name: heapdump
          description: Set <code>true</code> to include "heapdump.*"
          type: boolean
          required: false
        - in: query
          name: since
          description: |
            Epoch time in milliseconds.
            If this value greater than 0, log files older than the date will be excluded.
          type: integer
          format: int64
          required: false
      produces:
        - application/octet-stream
      responses:
        '200':
          description: Service log in zip
      tags:
        - System

  '/api/v1/system/config/{type}/{id}':
    parameters:
      - name: type
        in: path
        type: string
        enum:
          - collection
          - enrichment
          - labeler
          - sdranker
        required: true
        description: Type of resource
      - name: id
        in: path
        type: string
        description: ID of resource
        required: true
    get:
      summary: Export configuration and resources
      description: |
        Download a package which contains configuration and related resources.
        Related resouces except built-in resources and data sets will be included.
        Example: Exporting simple collection includes collection, enrichment, ranker and file resources.
      operationId: exportConfig
      tags:
        - System
      produces:
        - application/octet-stream
      responses:
        200:
          description: Zipped resource
          schema:
            type: string
            format: binary
        400:
          description: Resource is not exists or built-in

  '/api/v1/system/config':
    post:
      summary: Import configuration and resources
      description: |
        Upload exported file and load into the system.
        Imported resource ID will be remain same and can be updated by latest resource.
      operationId: importConfig
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: Exported file
      tags:
        - System
      responses:
        200:
          description: OK
  '/api/v1/datasets/{datasetId}':
    delete:
      summary: Delete a dataset
      description: Deletes an existing dataset.
      operationId: Dataset_delete
      parameters:
        - $ref: '#/parameters/datasetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
    get:
      summary: List dataset details
      description: Display detailed information about an existing dataset.
      operationId: Dataset_get
      parameters:
        - $ref: '#/parameters/datasetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/Dataset'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
    put:
      summary: Update a dataset
      description: Updates an existing dataset.
      consumes:
        - application/json
      operationId: Dataset_update
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Dataset'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/Dataset'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
  /api/v1/datasets/status:
    get:
      summary: List status for all datasets
      description: Display status information about all existing datasets.
      operationId: Dataset_statusAll
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseIngestionStatusSummary'
      tags:
        - Dataset
  '/api/v1/datasets/{datasetId}/status':
    get:
      summary: List dataset status
      description: Display status information about an existing dataset.
      operationId: Dataset_status
      parameters:
        - $ref: '#/parameters/datasetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IngestionStatusSummary'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
  '/api/v1/datasets/{datasetId}/converters':
    get:
      summary: List converter pileline details
      description: Display detailed information about converters.
      operationId: Dataset_getConverterPipeline
      parameters:
        - $ref: '#/parameters/datasetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ConverterPipelineConfiguration'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
    parameters: []
    put:
      summary: Update converter pipeline
      description: Updates an converter pipeline.
      consumes:
        - application/json
      operationId: Dataset_updateConverterPipeline
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConverterPipelineConfiguration'
      responses:
        '200':
          description: Successful operation.
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
      tags:
        - Dataset
  '/api/v1/datasets/{datasetId}/crawlers':
    get:
      summary: Get a list of crawlers
      description: Get a list of crawlers
      operationId: Crawler_list
      parameters:
        - in: path
          name: datasetId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ListResponseCrawler'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Crawler
    parameters: []
    post:
      consumes:
        - application/json
      summary: Create a crawler
      description: Create a crawler
      operationId: Crawler_create
      parameters:
        - in: path
          name: datasetId
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Crawler'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Crawler
  '/api/v1/datasets/{datasetId}/crawlers/{crawlerId}':
    delete:
      summary: Delete a crawler
      description: Delete a configuration of a specified crawler
      operationId: Crawler_delete
      parameters:
        - in: path
          name: datasetId
          required: true
          type: string
        - in: path
          name: crawlerId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The datasetId or crawlerId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Crawler
    get:
      summary: Get a crawler configuration
      description: Get a crawler configuration
      operationId: Crawler_get
      parameters:
        - in: path
          name: datasetId
          required: true
          type: string
        - in: path
          name: crawlerId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
          examples:
            crawlerType: ac-crawler-seed-unixfscrawler
            general_settings:
              crawler_name: test
              start_mode: NORMAL
            datasource_settings: {}
            crawlspace_settings:
              - label: /home/node
                path:
                  - /home/node
                subdirectory_level: '-1'
                rank_date: modified_date
                extensions: excluded
                excluded_extensions: []
                included_extensions: []
                character_set_auto_detection: true
                character_set: UTF-8
                id: ff5a6769-c507-4892-b4a7-6d1ed9d06f42
                target: /home/node
            plugin_settings: {}
        '404':
          description: The datasetId or crawlerId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Crawler
    parameters: []
    put:
      summary: Update a crawler configuration
      description: Update a configuration of a specified crawler
      consumes:
        - application/json
      operationId: Crawler_update
      parameters:
        - in: path
          name: datasetId
          required: true
          type: string
        - in: path
          name: crawlerId
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Crawler'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
      tags:
        - Crawler
  '/api/v1/datasets/{datasetId}/crawlers/{crawlerId}/start':
    parameters: []
    post:
      summary: Start a crawler
      description: Starts ingesting documents with a crawler.
      operationId: Crawler_start
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/crawlerIdParam'
      produces:
        - application/json
      responses:
        '204':
          description: Successful operation.
      tags:
        - Crawler
  '/api/v1/datasets/{datasetId}/crawlers/{crawlerId}/status':
    get:
      summary: List crawler status
      description: Displays status information about a crawler.
      operationId: Crawler_status
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/crawlerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ZkIngestionStatus'
      tags:
        - Crawler
    parameters: []
  '/api/v1/datasets/{datasetId}/crawlers/{crawlerId}/stop':
    post:
      summary: Stop a crawler
      description: Stops ingesting documents with a crawler.
      operationId: Crawler_stop
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/crawlerIdParam'
      produces:
        - application/json
      responses:
        '204':
          description: Successful operation.
      tags:
        - Crawler
  '/api/v1/datasets/{datasetId}/testit/upload/server':
    post:
      summary: Upload TestIt file on server
      description: Upload a TestIt file on the server
      operationId: Testit_upload_s
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: query
          name: path
          type: string
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseTestit'
      tags:
        - Converter
  '/api/v1/datasets/{datasetId}/testit/upload/remote':
    post:
      summary: Upload TestIt file on remote
      description: Upload a TestIt file on a remote machine
      operationId: Testit_upload_r
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - name: file
          in: formData
          type: file
          required: true
      consumes:
        - multipart/form-data
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseTestit'
      tags:
        - Converter
  '/api/v1/datasets/{datasetId}/testit/execute':
    post:
      summary: Execute TestIt
      description: Execute TestIt
      operationId: Testit_execute
      parameters:
        - $ref: '#/parameters/datasetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
      tags:
        - Converter
  '/api/v1/datasets/{datasetId}/testit/download':
    get:
      summary: Download TestIt result
      description: Download TestIt result
      operationId: Testit_download
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - name: path
          in: query
          type: string
          required: true
      produces:
        - application/xml
      responses:
        '200':
          description: Successful operation.
      tags:
        - Converter
  '/api/v1/datasets/{datasetId}/importers':
    get:
      summary: List importers
      description: Display a list of existing importers.
      operationId: Importer_list
      parameters:
        - $ref: '#/parameters/datasetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseImporter'
      tags:
        - Importer
    post:
      summary: Create an importer
      description: Creates a new importer.
      consumes:
        - application/json
      operationId: Importer_create
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/Importer'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
      tags:
        - Importer
  '/api/v1/datasets/{datasetId}/importers/{importerId}':
    delete:
      summary: Delete an importer
      description: Deletes an existing importer.
      consumes:
        - application/json
      operationId: Importer_delete
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/importerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
      tags:
        - Importer
    get:
      summary: List importer details
      description: Display detailed information about an existing importer.
      operationId: Importer_get
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/importerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      tags:
        - Importer
    put:
      summary: Update an importer
      description: Updates an existing importer.
      consumes:
        - application/json
      operationId: Importer_update
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/importerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/Importer'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/IngestionErrorResponse'
      tags:
        - Importer
  '/api/v1/datasets/{datasetId}/importers/{importerId}/start':
    post:
      summary: Start an importer
      description: Starts ingesting documents with an importer.
      operationId: Importer_start
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/importerIdParam'
      produces:
        - application/json
      responses:
        '204':
          description: Successful operation.
      tags:
        - Importer
  '/api/v1/datasets/{datasetId}/importers/{importerId}/status':
    get:
      summary: List importer status
      description: Displays status information about an existing importer.
      operationId: Importer_status
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/importerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ZkIngestionStatus'
      tags:
        - Importer
  '/api/v1/datasets/{datasetId}/importers/{importerId}/stop':
    post:
      summary: Stop an importer
      description: Stops ingesting documents with an importer.
      operationId: Importer_stop
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - $ref: '#/parameters/importerIdParam'
      produces:
        - application/json
      responses:
        '204':
          description: Successful operation.
      tags:
        - Importer
  '/api/v1/datasets/{datasetId}/documents':
    post:
      summary: Add a document
      description: Add a document to a dataset.
      operationId: Dataset_addDocument
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Document'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          headers: {}
          schema:
            $ref: '#/definitions/Dataset'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
  '/api/v1/datasets/{datasetId}/documents/{documentId}':
    delete:
      summary: Delete a document
      description: Delete a document from a dataset.
      operationId: Dataset_deleteDocument
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: path
          name: documentId
          description: The ID of the document.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The datasetId is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Dataset
    parameters: []
  '/api/v1/datasets/{datasetId}/import':
    post:
      deprecated: true
      summary: Import a CSV file
      description: (Deprecated) Imports a CSV file into an existing dataset.
      consumes:
        - multipart/form-data
      operationId: Dataset_importCSV
      parameters:
        - $ref: '#/parameters/datasetIdParam'
        - in: query
          name: tag
          required: true
          type: string
        - in: formData
          name: file
          required: true
          type: file
        - in: formData
          name: config
          required: true
          type: file
        - in: formData
          name: samples
          required: false
          type: string
      produces:
        - application/json
      responses:
        default:
          description: successful operation
      tags:
        - Dataset
  /api/v1/enrichments:
    get:
      summary: List enrichments
      description: Display a list of existing enrichments.
      operationId: Enrichment_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseEnrichment'
      tags:
        - Enrichment
    post:
      summary: Create an enrichment
      description: Creates a new enrichment
      consumes:
        - application/json
      operationId: Enrichment_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Enrichment'
      produces:
        - application/json
      responses:
        '200':
          description: Enrichment successfully created.
          schema:
            $ref: '#/definitions/Enrichment'
      tags:
        - Enrichment
  '/api/v1/enrichments/{enrichmentId}':
    delete:
      summary: Delete an enrichment
      description: Deletes an existing enrichment.
      operationId: Enrichment_delete
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Enrichment successfully deleted.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The enrichment is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    get:
      summary: List enrichment details
      description: Display detailed information about an existing enrichment.
      operationId: Enrichment_get
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Enrichment successfully retrieved.
          schema:
            $ref: '#/definitions/Enrichment'
        '404':
          description: The enrichment is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    put:
      summary: Update an enrichment
      description: Updates an existing enrichment
      consumes:
        - application/json
      operationId: Enrichment_update
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Enrichment'
      produces:
        - application/json
      responses:
        '200':
          description: Enrichment successfully updated.
          schema:
            $ref: '#/definitions/Enrichment'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
  '/api/v1/enrichments/{enrichmentId}/fdics':
    get:
      summary: List dictionaries
      description: Display a list of IDs of existing dictionaries.
      operationId: Enrichment_listFacetDictionaries
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseFileResource'
        '404':
          description: The enrichment is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    post:
      summary: Create a dictionary
      description: Creates a new dictionary
      consumes:
        - application/json
      operationId: Enrichment_createFacetDictionary
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/FileResource'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FileResource'
        '404':
          description: The enrichment is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
  '/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}':
    delete:
      summary: Remove a dictionary
      description: Removes an existing dictionary from collection.
      operationId: Enrichment_removeFacetDictionary
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - $ref: '#/parameters/dictionaryIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The dictionary is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    get:
      summary: List dictionary details
      description: Display detailed information about an existing dictionary.
      operationId: Enrichment_getFacetDictionary
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - $ref: '#/parameters/dictionaryIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FileResource'
        '404':
          description: The dictionary is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    put:
      summary: Update a dictionary
      description: Updates an existing dictionary of collection.
      consumes:
        - application/json
      operationId: Enrichment_updateFacetDictionary
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - $ref: '#/parameters/dictionaryIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/FileResource'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FileResource'
        '404':
          description: The dictionary is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
  '/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}/content':
    get:
      summary: Fetch a dictionary content
      description: Fetches a content of an existing dictionary.
      operationId: Enrichment_getFacetDictionaryContent
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - $ref: '#/parameters/dictionaryIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FacetDictionary'
        '404':
          description: The dictionary is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    put:
      summary: Update a dictionary content
      description: Updates a content of an existing dictionary.
      consumes:
        - application/json
      operationId: Enrichment_updateFacetDictionaryContent
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - $ref: '#/parameters/dictionaryIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/FacetDictionary'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FacetDictionary'
        '404':
          description: The dictionary is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
  '/api/v1/enrichments/{enrichmentId}/regexconfig':
    put:
      summary: Create or update regular expression annotator rules
      description: Create or update regular expression annotator rules, the enrichment must be in type regex
      operationId: Enrichment_updateRegExConfig
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RegExConfig'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/RegExConfig'
          examples:
            regExMap:
              all: [
                {
                  ruleId: '',
                  name: 'test',
                  description: 'test',
                  pattern: '(0[789]0)-?(\\d{4})-?(\\d{4})',
                  facetPath: '.regex.phonenumber',
                  facetValue: '$1$2$3'
                }
              ]
        '405':
          description: The enrichment does not match type regex or its first file resource does not match type regex config
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
    get:
      summary: Get the regular expression annotator rules
      description: Get the regular expression annotator rules, the enrichment must be in type regex
      operationId: Enrichment_getRegExConfig
      parameters:
        - $ref: '#/parameters/enrichmentIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/RegExConfig'
          examples:
            regExMap:
              all: [
                {
                  ruleId: '9d340020-a7aa-0136-9491-0242ac110002',
                  name: 'test',
                  description: 'test',
                  pattern: '(0[789]0)-?(\\d{4})-?(\\d{4})',
                  facetPath: '.regex.phonenumber',
                  facetValue: '$1$2$3'
                }
              ]
        '404':
          description: The regular expression config is not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '405':
          description: The enrichment does not match type regex or its first file resource does not match type regex config
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Enrichment
  '/api/v1/enrichments#pear':
    post:
      summary: Create an enrichment from pear file
      description: Create a new enrichment from pear file created by Studio.
      consumes:
        - multipart/form-data
      operationId: Enrichment_createFromPear
      parameters:
        - name: file
          in: formData
          type: file
          required: true
        - name: name
          in: formData
          type: string
          required: false
      produces:
        - application/json
      responses:
        '200':
          description: Enrichment successfully created.
          schema:
            $ref: '#/definitions/Enrichment'
      tags:
        - Enrichment
  '/api/v1/enrichments/ml':
    post:
      summary: Create an enrichment from WKS ML Model
      description: Create a new enrichment from ML Model exported from WKS
      consumes:
        - multipart/form-data
      operationId: Enrichment_createFromWKSMLModel
      parameters:
        - name: type
          in: query
          type: string
          required: true
        - name: file
          in: formData
          type: file
          required: true
        - name: name
          in: formData
          type: string
          required: false
        - name: facetPath
          in: formData
          type: string
          required: true
        - name: description
          in: formData
          type: string
          required: false
      produces:
        - application/json
      responses:
        '200':
          description: Enrichment successfully created.
          schema:
            $ref: '#/definitions/Enrichment'
      tags:
        - Enrichment
  '/api/v1/explore/{collectionId}/query':
    get:
      operationId: Exploration_query
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: query
          name: q
          required: true
          type: string
          description: Query string
        - in: query
          type: integer
          name: start
          minimum: 0
          description: Position of the first result to return
        - in: query
          name: rows
          type: integer
          minimum: 0
          maximum: 1250
          description: Determines the number of results to return for a single request
        - in: query
          name: lang
          type: string
          description: Language used to analyze the query string.
        - in: query
          name: sort
          type: string
          required: false
          description: >-
            Specifies sort fields of search results in either ascending (asc) or
            descending (desc) order. For example, "genre asc, price asc" sorts
            by the contents of the genre field in descending order, then within
            those results sorts in ascending order by the contents of the price
            field. By default, relevancy is used as the only sort key.
        - in: query
          name: fl
          type: string
          required: false
          description: >-
            Specifies the information included in a query response to a list of
            fields. Fields should be separated by commas.
        - in: query
          name: facet
          type: string
          enum:
            - 'on'
            - 'off'
          description: Flag to return facets or not.
        - in: query
          name: facet.field
          items:
            type: string
          type: array
          description: Facet names to return.
          collectionFormat: multi
        - in: query
          name: facet.stats
          type: string
          enum:
            - none
            - default
            - pairs
            - trends
            - deviations
          default: none
          required: false
          description: >-
            Type of facet statistics to be returned. You need to specify a correlation type
            to return correlation values in addition to facet counts.
        - in: query
          name: facet.limit
          type: integer
          minimum: 0
          maximum: 500
          description: Number of facet values to return for each facet field.
        - in: query
          name: facet.mincount
          type: integer
          default: 1
          minimum: 0
          description: Minimum counts required for a facet field to be included in the response.
        - in: query
          name: rq
          type: string
          required: false
          description: >-
            Specify query string used for result re-ranking. For example, to
            enable structured simlar document search, specify "{!sss}".
        - in: query
          name: qdocid
          type: string
          required: false
          description: Specify an existing indexed document id for similar document search.
        - in: query
          name: qdoc
          type: string
          required: false
          description: >-
            Specify a document JSON for similar document search. The format of
            searched document must be compliant to NLP API format.
        - in: query
          name: wt
          type: string
          enum:
            - json
            - csv
            - csv_facet
          required: false
          description: Type of [QueryResponseWriter](https://wiki.apache.org/solr/QueryResponseWriter)
        - in: query
          name: facet.sentiment
          description: Enable sentiment analysis if available
          type: boolean
        - in: query
          name: csv_facet.attr
          type: array
          description: |
            wt=csv_facet only: Limitting table of facet attributes. By default, export everything.
            ```sentiment_*``` only available if ```facet.sentiment``` is enabled.
          items:
            type: string
            enum:
              - count
              - correlation
              - corpus_count
              - expected_count
              - sentiment_positive
              - sentiment_neutral
              - sentiment_ambivalent
              - sentiment_negative
        - in: query
          name: csv.comment
          type: string
          description: |
            wt=csv_facet only: Comment character in CSV file. By default, no comments will be in CSV file.
        - in: query
          name: rapi.file.encoding
          type: string
          description: |
            wt=csv_facet only: Encoding of CSV file. Default is UTF-8
        - in: query
          name: rapi.file.name
          type: string
          description: |
            wt=csv_facet only: Additional response header will be added.
            ```Content-Disposition: attachment;filename="rapi.file.name"```
        - in: query
          name: date.format
          type: string
          description: |
             wt=csv_facet only: Valid pattern of ```java.time.format.DateTimeFormatter```
        - in: query
          name: TZ
          type: string
          description: Valid time zone of ```java.time.ZoneId```
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/QueryResult'
      summary: Searches for documents
      description: |
        Query syntax is based on [Apache Solr's Extended Dismax Query Parser](https://lucene.apache.org/solr/guide/7_4/the-extended-dismax-query-parser.html).
        Query response writer 'csv_facet' also use parameter in [CSV Parameters](https://lucene.apache.org/solr/guide/7_4/response-writers.html#csv-parameters) except csv.header and csv.null.
        Basic query examples:
          - Free text search
            Query: ```computer software```
            Result: Returns engine defined processing. Linguistic processing will be applied to the whole query string.
          - Boolean search (AND)
            Query: ```(computer AND software)```
            Result: Returns documents including both words of ```computer``` and ```software```. Note that linguistic processing is applied separately to each keyword.
          - Boolean search (OR)
            Query: ```(computer OR software)```
            Result: Returns documents including either word of ```computer``` or ```software```. Note that linguistic processing is applied separately to each keyword.
          - Phrase search
            Query: ```"computer software"```
            Result: Returns documents including a pharse ```"computer software"```. Note that words in the phrase must appear in the specified order.
          - Field search
            Query: ```lastname:smith div:software```
            Result: Returns all documents about employees with the last name Smith ```(lastname:smith)``` who work for the Software division ```(div:software)```.
          - Wildcard search
            Query: ```app*```
            Result: Finds documents that include terms beginning app such as ```apple```, ```apples```, ```application```.
            It is not guaranteed all variations of terms are expanded and searched.
            Especially wildcard terms starting ```*``` easily reach that expansion limit and cause slow performance.
      tags:
        - Exploration
    parameters: []

  '/api/v1/explore/{collectionId}/querymodifier':
    get:
      operationId: Exploration_querymodifier
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: query
          name: q
          required: true
          type: string
          description: Query string to be modified
        - in: query
          name: lang
          type: string
          description: Language used to analyze the query string
        - in: query
          name: querymodifier.minimumRequiredTerms
          type: integer
          description: >-
            Threshold to converts AND operators into OR operators, if the
            modified query has more terms than this threshold
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          headers: {}
      summary: Searches for documents
      tags:
        - Exploration
    parameters: []
  '/api/v1/explore/{collectionId}/rate':
    get:
      operationId: Exploration_rate
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: query
          name: docid
          required: true
          type: string
          description: Specify an existing indexed document id to be rated.
        - in: query
          name: userid
          required: true
          type: string
          description: Specify a user id who rates the document.
        - in: query
          name: rate
          type: number
          required: true
          format: double
          minimum: 0.0
          maximum: 5.0
          description: Rating value.
        - in: query
          name: click
          type: boolean
          description: Flag to increment click count for the document or not.
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          headers: {}
      summary: >
        Rate a document with 0.0-5.0 rating value for a user who liked it by `rate` parameter. Set `true` for `click` to increment.
        `rate` and `click` can be independent or co-exit.
      tags:
        - Exploration
    parameters: []
  /api/v1/fileResources:
    get:
      summary: List file resources
      description: Display a list of existing file resources.
      operationId: FileResource_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseFileResource'
      tags:
        - FileResource
    post:
      summary: Create a file resource
      description: Creates a new file resource.
      consumes:
        - application/json
      operationId: FileResource_create
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/FileResource'
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/FileResource'
      tags:
        - FileResource
  '/api/v1/fileResources/{fileResourceId}':
    delete:
      summary: Delete a file resource
      description: Deletes an existing file resource.
      operationId: FileResource_delete
      parameters:
        - $ref: '#/parameters/fileResourceIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: File resource successfully deleted.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The file resource is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - FileResource
    get:
      summary: List file resource details
      description: Display detailed information about an existing file resource.
      operationId: FileResource_get
      parameters:
        - $ref: '#/parameters/fileResourceIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: File resource successfully retrieve.
          schema:
            $ref: '#/definitions/FileResource'
        '404':
          description: The file resource is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - FileResource
    put:
      summary: Update a file resource
      description: Updates an existing file resource.
      consumes:
        - application/json
      operationId: FileResource_update
      parameters:
        - $ref: '#/parameters/fileResourceIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/FileResource'
      produces:
        - application/json
      responses:
        '200':
          description: File resource successfully updated.
          schema:
            $ref: '#/definitions/FileResource'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The file resource is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - FileResource
  '/api/v1/fileResources/{fileResourceId}/download':
    get:
      summary: Fetch a file resource content
      description: Fetches a content of an existing file resource.
      operationId: FileResource_download
      parameters:
        - $ref: '#/parameters/fileResourceIdParam'
      produces:
        - application/octet-stream
      responses:
        '200':
          description: Successful operation.
        '404':
          description: The file resource is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - FileResource
  '/api/v1/fileResources/{fileResourceId}/upload':
    post:
      summary: Update a file resource content
      description: Updates a content of an existing file resource.
      consumes:
        - multipart/form-data
      operationId: FileResource_upload
      parameters:
        - $ref: '#/parameters/fileResourceIdParam'
        - name: file
          in: formData
          type: file
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FileResource'
        '404':
          description: The file resource is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - FileResource
  '/api/v1/importer/csv/preview/{uploadId}/{fileName}':
    post:
      summary: Preview CSV file
      description: Display a preview of a CSV file.
      operationId: Importer_previewCSV
      parameters:
        - $ref: '#/parameters/uploadIdParam'
        - $ref: '#/parameters/fileNameParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CrawlerConfiguration'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/PreviewResult'
      tags:
        - Importer
  /api/v1/importer/csv/upload:
    post:
      summary: Upload CSV file
      description: Upload a CSV file.
      consumes:
        - multipart/form-data
      operationId: Importer_uploadCSV
      parameters:
        - in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UploadResult'
      tags:
        - Importer
  '/api/v1/importer/csv/upload/{uploadId}':
    get:
      summary: List CSV files
      description: Display a list of uploaded CSV files.
      operationId: Importer_listCSV
      parameters:
        - $ref: '#/parameters/uploadIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UploadResult'
      tags:
        - Importer
    put:
      summary: Add a CSV file
      description: Uploads a new CSV file.
      consumes:
        - multipart/form-data
      operationId: Importer_addCSV
      parameters:
        - $ref: '#/parameters/uploadIdParam'
        - in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UploadResult'
      tags:
        - Importer
  '/api/v1/importer/csv/upload/{uploadId}/{fileName}':
    delete:
      summary: Delete a CSV file
      description: Deletes an uploaded CSV file.
      operationId: Importer_deleteCSV
      parameters:
        - $ref: '#/parameters/uploadIdParam'
        - $ref: '#/parameters/fileNameParam'
      produces:
        - application/json
      responses:
        '204':
          description: Successful operation.
      tags:
        - Importer
  /api/v1/importer/types:
    get:
      summary: List importer types
      description: Display a list of available importer types.
      operationId: Importer_getTypes
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseConfigurationType'
      tags:
        - Importer
  '/api/v1/importer/types/{importerType}':
    get:
      summary: List importer configuration
      description: Displays a list of configuration parameter of importer.
      operationId: Importer_getConfigurationTemplate
      parameters:
        - in: path
          name: importerType
          description: The type of importer.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ConfigurationTemplate'
      tags:
        - Importer
  /api/v1/labelers:
    get:
      description: Display a list of existing labelers
      operationId: Labeler_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ListResponseLabeler'
          examples:
            items:
              - configs:
                  - description: null
                    id: 3dbf7d7d-b9d2-1180-0000-015e9e01299f
                    keptMLDatasets: []
                    keptTestMLDatasetId: null
                    keptTrainingMLDatasetId: null
                    keptValidationMLDatasetId: null
                    metadata: null
                    name: null
                    tags: {}
                    testDocNum: 0
                    testRatio: 2
                    trainingDocNum: 0
                    trainingRatio: 6
                    validationDocNum: 0
                    validationRatio: 2
                description: ''
                groundTruthLabelFacet: product_name
                id: 3dbf7d7d-b9d2-1180-0000-015e9e00f519
                metadata:
                  lastModified: 1505889416475
                mlCollectionId: 3dbf7d7d-b9d2-1180-0000-015e9e00f5c1
                models:
                  - checkpointFileResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e0407c2
                    creationEndTime: 1505889654760
                    creationStartTime: 1505889617876
                    config: {}
                    description: null
                    id: 3dbf7d7d-b9d2-1180-0000-015e9e0129e4
                    initializedTime: 1505889429986
                    l1RegularizationStrength: 0.01
                    l2RegularizationStrength: 0.01
                    learningRate: 0.1
                    metadata: null
                    modelFileResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e040792
                    name: v0.1
                    resourceSetId: 3dbf7d7d-b9d2-1180-0000-015e9e0129ba
                    state: READY_TO_DEPLOY
                    tags: {}
                    testEvalResultFileResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e0407b6
                    trainingHistory:
                      - iteration: 1000
                        loss: 0.688214
                        timestamp: 1505889632130
                        fields: 
                            loss: 0.688214
                            precission: 0.1643 
                            recall: 0.1542 
                            fields: ""
                      - iteration: 2000
                        loss: 0.241295
                        timestamp: 1505889635710
                        fields: 
                            loss: 0.241295
                            precission: 0.2643 
                            recall: 0.2442 
                            fields: ""
                      - iteration: 3000
                        loss: 0.112245
                        timestamp: 1505889642210
                        fields: 
                            loss: 0.112245
                            precission: 0.3623 
                            recall: 0.3424 
                            fields: ""
                      - iteration: 4000
                        loss: 0.12048
                        timestamp: 1505889646875
                        fields: 
                            loss: 0.12048
                            precission: 0.3933 
                            recall: 0.3645 
                            fields: ""
                    validationEvalResultFileResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e0407a9
                name: test
                predictedLabelFacet: predicted_field
                resources:
                  - creationEndTime: 1505889617766
                    creationStartTime: 1505889612197
                    description: null
                    docidListResourceId: 3dbf7d7d-b9d2-1180-0000-016680c642d3
                    featureListResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e0406c3
                    featureSize: 731
                    id: 3dbf7d7d-b9d2-1180-0000-015e9e0129ba
                    initializedTime: 1505889429935
                    labelListResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e0406e5
                    labels:
                      - minerals
                      - pine juice
                      - N/A
                      - orange juice
                      - chocolate muffin
                      - peach juice
                      - chocolate cookie
                      - milk chocolate
                      - vanilla ice cream
                      - strawberry ice cream
                      - cookie
                      - black coffee
                      - lemon tea
                      - strawberry jelly
                      - mint jelly
                      - mini cake
                      - muffin
                      - apple juice
                      - pastry
                      - apple juice (bottle)
                      - apple jelly
                      - orange juice (bottle)
                      - fruit jelly
                      - chocolate ice cream
                      - chocolate
                    metadata: null
                    name: v0.1
                    state: READY_TO_TRAIN_MODELS
                    tags: {}
                    testDataResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e0406a3
                    testRichDataSetId: 3dbf7d7d-b9d2-1180-0000-015e9e019239
                    trainingDataResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e04062d
                    trainingRichDataSetId: 3dbf7d7d-b9d2-1180-0000-015e9e019b24
                    validationDataResourceId: 3dbf7d7d-b9d2-1180-0000-015e9e040682
                    validationRichDataSetId: 3dbf7d7d-b9d2-1180-0000-015e9e019a19
                sourceDatasetId: 3dbf7d7d-b9d2-1180-0000-015e99d67863
                tags:
                  collectionTemplateId: 9838cad7-ff2a-4143-a4b0-cf53f334ec16
      summary: List labelers
      tags:
        - Labeler
    post:
      description: | 
        Create a new labeler.

        There are two way to create a labeler.

        First, by specifing sourceDatasetId. (In this case, mlcollectionId should not be set at creation. Afterward, call POST /api/v1/labelers/{labelerId}/collection )
        Second, by setting mlCollectionId with already existing collection. (In this case, sourceDataasetId should not be set)

        This will make difference in experience of training, although there is no difference in API call of models/all.

      consumes:
        - application/json
      operationId: Labeler_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InitLabeler'
      produces:
        - application/json
      responses:
        '200':
          description: Labeler successfully created.
          schema:
            $ref: '#/definitions/Labeler'
      summary: Create a labeler
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}':
    delete:
      summary: Delete a labeler
      description: Delete an existing labeler
      operationId: Labeler_delete
      parameters:
        - $ref: '#/parameters/labelerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Labeler successfully deleted.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '400':
          description: >-
            The labeler cannot be deleted because it is in use by one or more
            collections
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
    get:
      summary: Show labeler details
      description: Show detailed information of an existing labeler
      operationId: Labeler_get
      parameters:
        - $ref: '#/parameters/labelerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Labeler is successfully retrieved.
          schema:
            $ref: '#/definitions/Labeler'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
    put:
      summary: Update a labeler
      description: Update an existing labeler
      consumes:
        - application/json
      operationId: Labeler_update
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Labeler'
      produces:
        - application/json
      responses:
        '200':
          description: The labeler is successfully updated.
          schema:
            $ref: '#/definitions/Labeler'
        '400':
          description: The parameter body has a different ID from labelerId.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/collection':
    post:
      summary: Create and set a collection
      description: Create a collection to process the source dataset of the labeler
      consumes:
        - application/json
      operationId: Labeler_createCollection
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MLCollection'
      produces:
        - application/json
      responses:
        '200':
          description: A collection is successfully created for the labeler
          schema:
            $ref: '#/definitions/Collection'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models':
    put:
      summary: Set a labeler model
      description: Set a labeler model to the labeler
      consumes:
        - application/json
      operationId: Labeler_setModel
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ClassifierModel'
      produces:
        - application/json
      responses:
        '200':
          description: The model is successfully set.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/all':
    post:
      summary: Create a labeler model
      description: |
      
        Create and train a labeler model by separating the given source training
        dataset into training, validation, and test sets.
        About "(For experts)" parameters, refer [this](https://www.tensorflow.org/tutorials/wide#adding_regularization_to_prevent_overfitting) documentation.

        Parameters used in training process can be set by adding config parameter of body

        *Example*

        For controlling training process

         name | description
         ---- | -----------
         flag.batch_size | Int value. Batch size of examples per step
         flag.max_steps | Int value. Max number of step for training
         flag.val_monitor_every_n_steps |Int value. Step interval between validation
         flag.val_monitor_early_stopping_rounds | Int value. Number of retry until cancel training (early stopping)
         flag.early_stopping_improvement_ratio | loat value. Threshold of early stopping. The larger, the earlier trianing may stop.

        For detailed model information*

         name | description
         ---- | -----------
         flag.predictions_visible | True or False. Prediction results of documents in test dataset will be included. Currently only for classfier
         flag.weights_visible | True or False. Weights of trained model will be included. Currenlty only for classifier

        For re-training model with existing datasets (when start training by specifing dataset)

         name | description
         ---- | -----------
         datasets.keep | True or False. Keep datasets only if there are existing ML datasets and this option is set to True
         datasets.rebuild | True or False. Rebuild datasets only if keeping datasets and this option is set to True

      consumes:
        - application/json
      operationId: Labeler_createModelFromSourceDataset
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - in: body
          name: body
          description: Configuration to split the source training dataset
          required: true
          schema:
            $ref: '#/definitions/InitDatasetConfig'
        - in: query
          name: resource-name
          description: Name of the resource set created by this method
          required: false
          type: string
        - in: query
          name: model-name
          description: Name of the model created by this method
          required: false
          type: string
        - default: 2
          format: integer
          in: query
          name: feature-threshold
          description: Used during training a model. Threshold of the feature occurrences.  If this value is set at 2, metadata and words in text content fields occurred in only 1 document in the training set are not used as features.
          required: false
          type: number
        - default: 2
          format: integer
          in: query
          name: label-threshold
          description: Used during training a model. Threshold of the label occurrences.  If this value is set at 2, labels occurred in only 1 document in the training set are not used for the training and the prediction.
          required: false
          type: number
        - default: 0.1
          format: float
          in: query
          name: learning-rate
          description: (For experts) Learning rate used in the training
          required: false
          type: number
        - default: 0.5
          format: float
          in: query
          name: prob-threshold
          description: >-
            Used during using a deployed model. Threshold for the label prediction probabilities.
            If the predicted probability of a label is less than this value,
            the label is not included as the prediction result of this labeler in the runtime.
            A better value is calculcated and set while training.
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: Model creation is successfully started.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '400':
          description: >-
            Either of the collection or the source dataset is not set to the
            labeler.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/{modelId}':
    get:
      summary: Show labeler model details
      description: Show detailed information of an existing labeler model
      operationId: Labeler_getModel
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The model is successfully retrieved.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '404':
          description: The labeler or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/latest':
    get:
      summary: Show the latest labeler model details
      description: Show detailed information of the latest model of the labeler
      operationId: Labeler_getModel_latest
      parameters:
        - $ref: '#/parameters/labelerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The latest model is successfully retrieved.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/{modelId}/enrichments':
    get:
      summary: List enrichments where the labeler model deployed
      description: Show IDs of enrichments where the specified labeler model deployed.
      operationId: Labeler_getEnrichment
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseString'
        '404':
          description: The labeler or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/latest/enrichments':
    get:
      summary: List enrichments where the latest labeler model deployed
      description: Show IDs of enrichments where the latest labeler model deployed.
      operationId: Labeler_getEnrichment_latest
      parameters:
        - $ref: '#/parameters/labelerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseString'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/{modelId}/status':
    get:
      summary: Show labeler model status
      description: Show status of the specified labeler model
      operationId: Labeler_getModelStatus
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ClassifierModelStatus'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/{modelId}/task':
    delete:
      summary: Cancel labeler model training task
      description: Cancel labeler model training task
      operationId: Labeler_cancelModelTraining
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The task successfully cancelled.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The labeler or model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/{modelId}/test':
    get:
      summary: Show test evaluation result of the model
      description: Show test evaluation result of the specified labeler model.
      operationId: Labeler_getTestEval
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/LabelerEvalResult'
        '404':
          description: The labeler or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/models/{modelId}/validation':
    get:
      summary: Show validation evaluation result of the model
      description: Show validation evaluation result of the specified labeler model.
      operationId: Labeler_getValidationEval
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/LabelerEvalResult'
        '404':
          description: The labeler or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/test-evals':
    get:
      summary: List test evaluation results
      description: List test evaluation results of all models of the specified labeler.
      operationId: Labeler_getTestEvals
      parameters:
        - $ref: '#/parameters/labelerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ListResponseLabelerEvalResult'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/resources':
    put:
      summary: Set a labeler resource set
      description: Set a labeler resource set
      consumes:
        - application/json
      operationId: Labeler_setResourceSet
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ResourceSet'
      produces:
        - application/json
      responses:
        '200':
          description: The resource set is successfully set.
          schema:
            $ref: '#/definitions/ResourceSet'
        '404':
          description: The labeler is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
  '/api/v1/labelers/{labelerId}/resources/{resourceSetId}':
    get:
      summary: Show labeler resource set details
      description: Show detailed information of an existing labeler resource set
      operationId: Labeler_getResourceSet
      parameters:
        - $ref: '#/parameters/labelerIdParam'
        - $ref: '#/parameters/resourceSetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ResourceSet'
        '404':
          description: The labeler or the resource set is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Labeler
    parameters: []
  /api/v1/sdrankers:
    get:
      description: Display a list of existing similar document rankers
      operationId: SDRanker_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ListResponseSDRanker'
      summary: List similar document rankers
      tags:
        - SimilarDocumentRanker
    post:
      description: |
        Create a new similar document ranker.

        There are two way to create a similar document ranker.

        First, by specifing sourceDatasetId. (In this case, mlcollectionId should not be set at creation. Afterward, call POST /api/v1/sdrankers/{rankerId}/collection )
        Second, by setting mlCollectionId with already existing collection. (In this case, sourceDataasetId should not be set)

        This will make difference in experience of training, although there is no difference in API call of models/all.

      consumes:
        - application/json
      operationId: SDRanker_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InitSDRanker'
      produces:
        - application/json
      responses:
        '200':
          description: Ranker successfully created.
          schema:
            $ref: '#/definitions/SDRanker'
      summary: Create a similar document ranker
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}':
    delete:
      summary: Delete a ranker
      description: Delete an existing ranker
      operationId: SDRanker_delete
      parameters:
        - $ref: '#/parameters/rankerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The ranker successfully deleted.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '400':
          description: >-
            The ranker cannot be deleted because it is referenced by one or more
            collections
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
    get:
      summary: Show similar document ranker details
      description: Show detailed information of an existing ranker
      operationId: SDRanker_get
      parameters:
        - $ref: '#/parameters/rankerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The ranker is successfully retrieved.
          schema:
            $ref: '#/definitions/SDRanker'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
    put:
      summary: Update a similar document ranker
      description: Update an existing ranker
      consumes:
        - application/json
      operationId: SDRanker_update
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SDRanker'
      produces:
        - application/json
      responses:
        '200':
          description: The ranker is successfully updated.
          schema:
            $ref: '#/definitions/SDRanker'
        '400':
          description: The parameter body has a different ID from sdRankerId.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/collection':
    post:
      summary: Create and set a collection
      description: Create a collection to process the source dataset of the ranker
      consumes:
        - application/json
      operationId: SDRanker_createCollection
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MLCollection'
      produces:
        - application/json
      responses:
        '200':
          description: A collection is successfully created for the ranker
          schema:
            $ref: '#/definitions/Collection'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models':
    put:
      summary: Set a similar document ranker model
      description: Set a ranker model to the ranker
      consumes:
        - application/json
      operationId: SDRanker_setModel
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ClassifierModel'
      produces:
        - application/json
      responses:
        '200':
          description: The model is successfully set.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/all':
    post:
      summary: Create a similar document ranker model
      description: >-
        Create and train a ranker model by separating the source training dataset into
        training, validation, and test sets

        Parameters used in training process can be set by adding config parameter of body

        *Example*

        For controlling training process

         name | description
         ---- | -----------
         flag.batch_size | Int value. Batch size of examples per step
         flag.max_steps | Int value. Max number of step for training
         flag.val_monitor_every_n_steps |Int value. Step interval between validation
         flag.val_monitor_early_stopping_rounds | Int value. Number of retry until cancel training (early stopping)

      consumes:
        - application/json
      operationId: SDRanker_createModelFromSourceDataset
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - in: body
          name: body
          description: Configuration to split the source training dataset
          required: true
          schema:
            $ref: '#/definitions/InitDatasetConfig'
        - in: query
          name: resource-name
          description: Name of the resource set created by this method
          required: false
          type: string
        - in: query
          name: model-name
          description: Name of the model created by this method
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Model creation is successfully started.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '400':
          description: >-
            Either of the collection or the source dataset is not set to the
            ranker.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/{modelId}':
    get:
      summary: Show similar document ranker model details
      description: Show detailed information of an existing ranker model
      operationId: SDRanker_getModel
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The model is successfully retrieved.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '404':
          description: The ranker or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/latest':
    get:
      summary: Show the latest similar document ranker model details
      description: Show detailed information of the latest model of the ranker
      operationId: SDRanker_getModel_latest
      parameters:
        - $ref: '#/parameters/rankerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The latest model is successfully retrieved.
          schema:
            $ref: '#/definitions/ClassifierModel'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/{modelId}/instances':
    get:
      summary: List ranker instances where the model deployed
      description: Show IDs of ranker instances where the specified model deployed.
      operationId: SDRanker_getInstances
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseString'
        '404':
          description: The ranker or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/latest/instances':
    get:
      summary: List ranker instances where the latest ranker model deployed
      description: Show IDs of enrichments where the latest ranker model deployed.
      operationId: SDRanker_getInstances_latest
      parameters:
        - $ref: '#/parameters/rankerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseString'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/{modelId}/status':
    get:
      summary: Show ranker model status
      description: Show status of the specified ranker model
      operationId: SDRanker_getModelStatus
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ClassifierModelStatus'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/{modelId}/task':
    delete:
      summary: Cancel ranker model training task
      description: Cancel ranker model training task
      operationId: SDRanker_cancelModelTraining
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: The task successfully cancelled.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '404':
          description: The ranker or model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/models/{modelId}/test-rank':
    get:
      summary: Show ranking evaluation result of the model
      description: >-
        Show ranking evaluation result of the specified ranker model using the
        test dataset.
      operationId: SDRanker_getTestRankEval
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - $ref: '#/parameters/modelIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/RankerEvalResult'
        '404':
          description: The ranker or the model is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/test-evals':
    get:
      summary: List ranking evaluation results
      description: >-
        List ranking evaluation results using the test dataset of all models of
        the specified ranker.
      operationId: SDRanker_getTestEvals
      parameters:
        - $ref: '#/parameters/rankerIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ListResponseRankerEvalResult'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/resources':
    put:
      summary: Set a ranker resource set
      description: Set a ranker resource set
      consumes:
        - application/json
      operationId: SDRanker_setResourceSet
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ResourceSet'
      produces:
        - application/json
      responses:
        '200':
          description: The resource set is successfully set.
          schema:
            $ref: '#/definitions/ResourceSet'
        '404':
          description: The ranker is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  '/api/v1/sdrankers/{rankerId}/resources/{resourceSetId}':
    get:
      summary: Show ranker resource set details
      description: Show detailed information of an existing ranker resource set
      operationId: SDRanker_getResourceSet
      parameters:
        - $ref: '#/parameters/rankerIdParam'
        - $ref: '#/parameters/resourceSetIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ResourceSet'
        '404':
          description: The ranker or the resource set is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - SimilarDocumentRanker
  /api/v1/rankers:
    get:
      summary: List ranker instances
      description: Display a list of existing ranker instances.
      operationId: Ranker_list
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListResponseRanker'
      tags:
        - Ranker
    post:
      summary: Create a ranker instance
      description: Creates a new ranker instance
      consumes:
        - application/json
      operationId: Ranker_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Ranker'
      produces:
        - application/json
      responses:
        '200':
          description: Ranker successfully created.
          schema:
            $ref: '#/definitions/Ranker'
      tags:
        - Ranker
  '/api/v1/rankers/{rankerInstanceId}':
    delete:
      summary: Delete a ranker instance
      description: Delete an existing ranker instance
      operationId: Ranker_delete
      parameters:
        - $ref: '#/parameters/rankerInstanceIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Ranker instance successfully deleted.
          schema:
            $ref: '#/definitions/SimpleResponse'
        '400':
          description: >-
            The ranker instance cannot be deleted because it is in use by one or
            more collections
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The ranker instance is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Ranker
    get:
      summary: Show ranker instance details
      description: Show detailed information of an existing ranker instance
      operationId: Ranker_get
      parameters:
        - $ref: '#/parameters/rankerInstanceIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Ranker instance is successfully retrieved.
          schema:
            $ref: '#/definitions/Ranker'
        '404':
          description: The ranker instance is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Ranker
    put:
      summary: Update a ranker instance
      description: Update an existing ranker instance
      consumes:
        - application/json
      operationId: Ranker_update
      parameters:
        - $ref: '#/parameters/rankerInstanceIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Ranker'
      produces:
        - application/json
      responses:
        '200':
          description: The ranker instance is successfully updated.
          schema:
            $ref: '#/definitions/Ranker'
        '400':
          description: The parameter body has a different ID from rankerId.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The ranker instance is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Ranker
  /api/v1/migration/cas2index:
    post:
      summary: Migrate CAS to index mapping file
      description: Convert common analysis structure to index mapping file.
      operationId: convertCasToIndex
      consumes:
        - application/xml
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InputStream'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AnnotationIndexingSpecs'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Migration
  /api/v1/migration/category:
    post:
      summary: Migrate category tree file
      description: Convert category_tree.xml file to Json format.
      operationId: convertCategoryTree
      consumes:
        - application/xml
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InputStream'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Migration
  /api/v1/migration/fdic:
    post:
      summary: Migrate dictionary file
      description: Convert fdic xml file to Json format.
      operationId: convertFdic
      consumes:
        - application/xml
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/InputStream'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FacetDictionary'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Migration
  /api/v1/migration/csv2fdic:
    post:
      summary: Migrate dictionary CSV file
      description: Convert the list of words in CSV file to Json format.
      operationId: convertCsvToFdic
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          required: true
          schema:
            $ref: '#/definitions/InputStream'
        - in: query
          name: facet
          required: true
          type: string
        - in: query
          name: language
          required: false
          type: string
        - in: query
          name: encoding
          required: false
          type: string
        - in: query
          name: pos
          required: false
          type: string
        - in: query
          name: delimiters
          required: false
          type: string
        - in: query
          name: escape
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/FacetDictionary'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - Migration
  /api/v1/usermgmt/users:
    get:
      tags:
        - User
      summary: Get all users
      description: |
        Gets `User` objects.
        Optional query param of **includeAll** determines
        whether to include user entries that are in pending or  denied state
        else only access-granted users will be returned.

        _**Needs Admin role**_
        no sensitive info - not even the password hash returned
      operationId: listUsers
      parameters:
        - name: includeAll
          in: query
          description: set to true to include users in pending/denied access states too
          required: false
          type: boolean
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      x-swagger-router-controller: User
  /api/v1/usermgmt/user:
    post:
      tags:
        - User
      summary: 'Create user (or Grant Access if an External LDAP is present '
      description: >
        This can only be done by a user with an admin role.

        The admin would provide the user's details and if LDAP is setup, also
        select if the user is to be authenticated by LDAP or by our internal
        repo.

        If External LDAP is picked as an authenticator for the user, password
        should not be prompted for - since the Admin will not have the user's
        password. Else, if the internal authenticator is used, the password
        would be an initial default - which the user can change after they
        login.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: 'With <reason>, existing user etc..'
        default:
          description: successful operation
      x-swagger-router-controller: User
  /api/v1/usermgmt/signup:
    post:
      security: []
      tags:
        - User
      summary: User requesting access
      description: >
        This option should only be shown if the user is not already logged in.

        The use provides their username and password.


        We first validate if they have already signed up and if so - we show
        whether their status is pending/denied/approved etc.


        If its ExternalLDAP - then we would validate that their entry exists in
        LDAP, by doing an ldap bind with their creds.


        The user record is stored with 'approval_status' set to 'pending', for
        an admin to approve.  The config setting 'auto_signup' that
        automatically approves all signups.


        If the Admin has setup an External LDAP - all signups will assume that
        the username is an LDAP user. (Workaround - if somebody really want an
        internal username, the Admin will add for them or change their record
        from internal to external).

        (or)

        An alternative -there is a checkbox that says "Authenticate against
        LDAP" -this is checked on by  default.  If the user unchecks this, then
        the user gets created in the "internal" repo.


        The new user cannot request an 'admin' role - but can only be granted
        the Admin privilege by another admin.  Password is not to be prompted
        for .



        Candidate for v2 ? - workaround is an Admin adds every user to our User
        list.
      operationId: userSignUp
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: username
          in: formData
          description: The user name for login
          required: true
          type: string
        - name: displayName
          in: formData
          description: The display name of user when logged in.
          required: true
          type: string
        - name: email
          in: formData
          description: The email of user when logged in.
          required: false
          type: string
        - name: password
          in: formData
          description: The password for login in clear text
          required: false
          type: string
        - name: approval_status
          in: formData
          description: 'If LDAP is set up with auto-signup, set this to "enabled"'
          required: false
          type: string
        - name: authenticator
          in: formData
          description: The authenticator for login in clear text
          required: false
          type: string
      responses:
        '400':
          description: With <reason> existing userid..
        default:
          description: successful operation
      x-swagger-router-controller: Preauthentication
  /api/v1/usermgmt/user/currentUserInfo:
    get:
      tags:
        - User
      summary: Get current user info
      description: Get current user info. No sensitive info - not even the password hash
      operationId: getCurrentUserInfo
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
      x-swagger-router-controller: User
  '/api/v1/usermgmt/user/{username}':
    get:
      tags:
        - User
      summary: Get user details by user name
      description: >-
        If admin, then can retrieve any user info. Otherwise, only current
        user's info.  In any case, no sensitive info - not even the password
        hash
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
        - User
      summary: Update user record (including his password/hash)
      description: This can only be done by an admin
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      x-swagger-router-controller: User
    delete:
      tags:
        - User
      summary: Delete user
      description: >-
        This can only be done by an admin. Note the initial 'admin' user cannot
        be deleted
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      x-swagger-router-controller: User
  /api/v1/usermgmt/login:
    post:
      security: []
      tags:
        - User
      summary: Logs user into the system
      description: >
        This option should only be shown if the user is not already logged in.


        If external LDAP is used as the authenticator for this user record , the
        login method will delegate the username/password validation to that ldap
        host. Else it would generate the 1-way hash using the supplied password
        and compare it with the hash stored in the repo for that user.


        As part of the login flow, a JWT token will be generated with the
        username, role, a refresh_timestamp in the payload. This would also be
        stored in the cloudant repo. It will also be set as a cookie to keep
        track of the user's session.


        The refresh_timestamp will be used later on to verify if the user's
        record is still current & if so, regenerate the JWT token. This cycle
        repeats at regular intervals on user http requests. If the user is idle
        or has closed off his browser - the cookie will become invalid since the
        refresh timestamp would have expired & the customer would need to
        re-sign in.

         Once sign in is complete, if the request is complete, the user's browser is redirected to the URL that they were in previously before being redirected to sign in page.

         Sign-in Variation: We should also support the standard Basic Auth for REST API. The user can provide a Authorization: Basic base64-ed header when requesting a target URL.We would need to seamlessly validate their Basic Auth credentials and continue their request to their target URL. Note: We cannot throw a 302 redirect like we would to the browser.  To this end, we would have an internal REST function (say /user/validateAuth) that is invoked by the nginx proxy when it encounters the Basic Auth header to validate the credentials. This function would return the JWT token and a 200 for success. On failure, returns a 401 with error messages just like /user/signin.  The nginx proxy, on success, would proxy_pass the request to the requested target URL.

         Lockout Policy: (v2 Candidate) If the number of login attempts (recent_number_of_failed_attempts) exceed 'policy_numfailedattempts' within the last 'policy_numfailedattempts_timeperiod' minutes, then lock the user account for 30 minutes. If after that time, the user tries again, the lock is released
      operationId: signinUser
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: username
          in: formData
          description: The user name for login
          required: true
          type: string
        - name: password
          in: formData
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
        '401':
          description: >-
            Not authorized due to <reason> (which could be approval still
            pending or has been denied by the admin)
      x-swagger-router-controller: Preauthentication
  /api/v1/usermgmt/validate:
    get:
      tags:
        - User
      summary: Almost an alias to the signin method. but intended for REST APIs
      description: >
        For clients that cannot tolerate cookies or redirects and would prefer
        to use Basic auth headers or Bearer tokens instead. Intended to be
        invoked by our nginx proxy to seamlessly pass through the request to the
        right target url.
         send out Authorization: Basic <base64ed username:password>  OR Authorization: Bearer <token>
      security: []
      operationId: validateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: header
          description: The user name part in Basic Auth
          required: false
          type: string
        - name: password
          in: header
          description: The password part in Basic Auth
          required: false
          type: string
        - name: Authorization
          in: header
          description: 'The bearer token part in Bearer Auth. '
          required: false
          type: string
      responses:
        '200':
          description: >-
            successful operation. If client sent Basic auth, responds with the
            JWT token for use as a Bearer token later on.
          schema:
            type: string
        '400':
          description: Invalid username/password supplied/Bearer token expired
        '401':
          description: >-
            Not authorized due to <reason> (which could be approval still
            pending or has been denied by the admin)
      x-swagger-router-controller: Preauthentication
  /api/v1/usermgmt/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user from session
      description: |
        should only be shown when the user is logged in.
        The generated JWT token should be deleted from the repo as well.
      operationId: doLogout
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /api/v1/usermgmt/user/changemypassword:
    post:
      tags:
        - User
      summary: Helps the user change his password
      description: Only if external LDAP is not setup
      operationId: changeMyPassword
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: password
          in: formData
          description: The new password for the currently logged in user
          required: true
          type: string
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /api/v1/usermgmt/user/changeuserpassword:
    post:
      tags:
        - User
      summary: Helps the admin change user's password
      description: Only if external LDAP is not setup
      operationId: changeUserPassword
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: username
          in: formData
          description: The username for user that needs new password
          required: true
          type: string
        - name: password
          in: formData
          description: The new password for the currently logged in user
          required: true
          type: string
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /api/v1/usermgmt/groups:
    get:
      tags:
        - Group
      summary: List groups
      description: List all groups
      operationId: listGroups
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGroup'
    post:
      summary: Create group
      tags:
        - Group
      operationId: createGroup
      parameters:
        - in: body
          name: body
          description: Create user object
          required: true
          schema:
            $ref: '#/definitions/UserGroup'
      responses:
        '200':
          description: Update group
          schema:
            $ref: '#/definitions/UserGroup'
        '404':
          description: usergroup not found
  '/api/v1/usermgmt/groups/{name}':
    get:
      tags:
        - Group
      summary: Get group
      description: Get group info
      operationId: getGroup
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: The name that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserGroup'
        '400':
          description: Invalid username supplied
        '404':
          description: Group not found
    put:
      summary: Update group
      tags:
        - Group
      operationId: updateGroup
      parameters:
        - name: name
          in: path
          description: The name that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Create user object
          required: true
          schema:
            $ref: '#/definitions/UserGroup'
      responses:
        '200':
          description: Update group
          schema:
            $ref: '#/definitions/UserGroup'
        '404':
          description: usergroup not found
    delete:
      tags:
        - Group
      summary: Remove group
      operationId: deleteGroup
      parameters:
        - name: name
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
        - name: force
          in: query
          description: Remove group from users and remove the group.
          type: boolean
      responses:
        '200':
          description: successful operation
  '/api/v1/usermgmt/groups/{name}/users':
    get:
      tags:
        - Group
      summary: List users in a group
      operationId: listUserInGroup
      parameters:
        - name: name
          in: path
          description: The name that needs to be fetched
          required: true
          type: string
        - name: offset
          in: query
          description: Offset of the users returned
          type: integer
          minimum: 0
        - name: size
          in: query
          description: Number of users returned
          type: integer
          minimum: 1
          maximum: 1000
      responses:
        '200':
          description: Array of user ID
          schema:
            type: array
            items:
              type: string
        '400':
          description: 'Wrong value was given in offset, size'
        '404':
          description: Group not found.

  '/api/v1/collections/{collectionId}/export':
    get:
      summary: List doucment export jobs
      description: List all jobs
      operationId: DocumentExport_list
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ExportStatus'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport
    post:
      summary: Request document export
      description: Request document export
      consumes:
        - application/json
      operationId: DocumentExport_submit
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ExportRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Job ID
          schema:
            type: string
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport
  '/api/v1/collections/{collectionId}/export/{jobId}':
    get:
      summary: Get status of a job
      description: Get status of job
      operationId: DocumentExport_getJob
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - $ref: '#/parameters/jobIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Job status
          schema:
            $ref: '#/definitions/ExportStatus'
        '404':
          description: The job is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport
  '/api/v1/collections/{collectionId}/export/{jobId}/content':
    get:
      summary: Download exported document
      description: Get status of job
      operationId: DocumentExport_download
      parameters:
        - $ref: '#/parameters/collectionIdParam'
        - $ref: '#/parameters/jobIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Exported documents
        '204':
          description: Job is not finished or failed. Nothing has exported.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport
  '/api/v1/collections/{collectionId}/trainCf':
    get:
      summary: Start trarining document recommendation model based on rating activities
      description: Start document recommendation model training
      operationId: DocumentExport_trainCf
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ExportStatus'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport
  '/api/v1/collections/{collectionId}/trainCf/list':
    get:
      summary: List document recommendation training jobs
      description: List all jobs
      operationId: DocumentExport_listCf
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ExportStatus'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport

  '/api/v1/collections/{collectionId}/trainWv':
    get:
      summary: Start trarining wordvector model based on part of speech facets
      description: Start wordvector model training
      operationId: DocumentExport_trainWv
      parameters:
        - name: fields
          in: query
          required: true
          type: string
          description: Specify fields to train word vector(delimiter is comma)
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ExportStatus'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport

  '/api/v1/collections/{collectionId}/trainWv/list':
    get:
      summary: List wordvector training jobs
      description: List all jobs
      operationId: DocumentExport_listWv
      parameters:
        - $ref: '#/parameters/collectionIdParam'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ExportStatus'
        '404':
          description: The collection is not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - DocumentExport

  '/api/v1/usermgmt/config/file/':
    get:
      summary: List config files
      operationId: listConfigFile
      description: |
        _**Needs Admin role**_
        List config files
      tags:
        - User
      produces:
        - application/json
      responses:
        200:
          description: |
            List of WLP config files. ```custom_ldap_config.xml``` is included from server.
          schema:
            type: array
            items:
              $ref: '#/definitions/ConfigFile'

  '/api/v1/usermgmt/config/file/{name}':
    parameters:
      - in: path
        name: name
        type: string
        description: File name
        required: true
    get:
      tags:
        - User
      summary: Get config file
      description: |
        _**Needs Admin role**_
        Get content of a config file
      operationId: getConfigFile
      produces:
        - application/octet-stream
      responses:
        200:
          description: |
            Contents of the file
        404:
          description: File not found.
    post:
      operationId: uploadConfigFile
      summary: Upload config file
      tags:
        - User
      parameters:
        - in: query
          name: noEncode
          type: boolean
          description: true to disable encode passwords
        - in: body
          name: content
          description: Content of a file
          schema:
            type: string
            format: binary
      description: |
        _**Needs Admin role**_
        Upload single configuratil file to the server.
        Attributes "password", "bindPassword" and "keysPassword" will be encoded by aes if XML file under 1MB.
      responses:
        200:
          description: Uploaded file info
          schema:
            $ref:  '#/definitions/ConfigFile'
    delete:
      tags:
        - User
      operationId: deleteConfigFile
      summary: Delete config file
      description: |
        _**Needs Admin role**_
        Delete config file
      responses:
        200:
          description: OK

  '/api/v1/usermgmt/config/admin':
    get:
      operationId: getAdminPatterms
      summary: Get list of pattern texts to make user as Admin
      tags:
        - User
      description: |
        _**Needs Admin role**_
        Get list of pattern texts to make user as Admin.
        See [POST /api/v1/usermgmt/config/admin](#!/User/putAdminPatterns)
      responses:
        200:
          description: Get list of patterns currently set
          schema:
            type: array
            items:
              $ref: '#/definitions/GroupPattern'
            example:
              - pattern: CN=othergroup,CN=Users,DC=example,DC=org
                allow: false
              - pattern: CN=mygroup,CN=Users,DC=example,DC=org
                role: AppUser
              - pattern: CN=mygroup-.*,CN=Users,DC=example,DC=org

        400:
          description: Invlaida pattern is found
    post:
      operationId: putAdminPatterns
      summary: Put list of pattern texts to make user as Admin
      tags:
        - User
      description: |
        _**Needs Admin role**_
        Set list of pattern texts to make user as Admin.
        For each patterns, each user and groups are evaluated. Once pattern matches, user will be Admin (allow=true) or User(allow=false).
        If not of pattern matches any of user's group, user's role is set as "User"
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            type: array
            items:
              $ref: '#/definitions/GroupPattern'
            example:
              - pattern: CN=othergroup,CN=Users,DC=example,DC=org
                allow: false
              - pattern: CN=mygroup,CN=Users,DC=example,DC=org
                role: AppUser
              - pattern: CN=mygroup-.*,CN=Users,DC=example,DC=org

      responses:
        200:
          description: OK

definitions:
  IngestionStatus:
    properties:
      converterPipelineStatus:
        $ref: '#/definitions/ConverterPipelineStatus'
      crawlerStatus:
        $ref: '#/definitions/CrawlerStatus'
      status:
        enum:
          - NotStarted
          - Started
          - Running
          - Stopped
          - Completed
          - Errored
        type: string
    type: object
  Annotation:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      text:
        type: string
      beginIndex:
        type: integer
      endIndex:
        type: integer
      properties:
        type: object
  AnnotationIndexingSpecType:
    properties:
      asFacet:
        items:
          $ref: '#/definitions/AsFacetType'
        type: array
        xml:
          name: AsFacet
      filter:
        items:
          $ref: '#/definitions/FilterType'
        type: array
        xml:
          name: Filter
      uimaIndex:
        type: string
        xml:
          attribute: true
      uimaType:
        type: string
        xml:
          attribute: true
    type: object
  AnnotationIndexingSpecs:
    properties:
      annotationIndexingSpec:
        items:
          $ref: '#/definitions/AnnotationIndexingSpecType'
        type: array
        xml:
          name: AnnotationIndexingSpec
    type: object
    xml:
      name: AnnotationIndexingSpecs
  AsFacetType:
    properties:
      pathComponent:
        items:
          $ref: '#/definitions/PathComponentType'
        type: array
        xml:
          name: PathComponent
    type: object
  LabeledRange:
    type: object
    properties:
      label:
        type: string
        description: Label of the range
      query:
        type: string
        description: |
          [Range query](https://wiki.apache.org/solr/SolrQuerySyntax) of the range.
    example: [
          {
            "label": "0 - 100",
            "query": "[0, 100)"
          },
          {
            "label": "100 - 10000",
            "query": "[100, 10000)"
          },
          {
            "label": "10000 - 1000000",
            "query": "[10000, 1000000)"
          }]
  Category:
    properties:
      children:
        items:
          $ref: '#/definitions/Category'
        type: array
      countSubcategories:
        type: boolean
      counterFieldName:
        type: string
      editable:
        type: boolean
      liftUp:
        type: boolean
      name:
        type: string
      path:
        type: string
      storePosition:
        type: boolean
      storeSubcategoriesPosition:
        type: boolean
      type:
        type: string
      visible:
        type: boolean
      tags:
        type: object
        properties:
          visualization:
            description: |
              |key|description|
              |:--|:--|
              |auto|Use system default visualization|
              |facettable|Facet Table|
              |cloud|Tag Clou|
              |map|US States Map|
            default: auto
            enum:
              - auto
              - facettable
              - cloud
              - map
          range:
            type: array
            items:
              $ref: '#/definitions/LabeledRange'
        additionalProperties:
          properties: {}
          type: object
    type: object
    example:
      - {"path":"","name":"Root","children":[{"tags":{"visualization":"auto","range":null},"path":"_word","name":"Part of Speech","editable":false,"storePosition":true,"countSubcategories":true,"storeSubcategoriesPosition":true},{"tags":{"visualization":"auto","range":[{"label":"0 - 100","query":"[0, 100)"},{"label":"100 - 10000","query":"[100, 10000)"},{"label":"10000 - 1000000","query":"[10000, 1000000)"}]},"path":"price","name":"price","type":"Long","counterFieldName":"pri"},{"tags":{"visualization":"auto","range":[{"label":"1990 - 2000","query":"[1990-01-01T00:00:00Z, 2000-01-01T00:00:00Z)"},{"label":"2000 - 2010","query":"[2000-01-01T00:00:00Z, 2010-01-01T00:00:00Z)"},{"label":"2010 - 2020","query":"[2010-01-01T00:00:00Z, 2020-01-01T00:00:00Z)"}]},"path":"date_added","name":"date_added","type":"Date","counterFieldName":"date_added"}]}

  Collection:
    properties:
      category:
        $ref: '#/definitions/Category'
      datasets:
        items:
          type: string
        type: array
        example: ["3dbf7d7d-b9d2-1180-0000-016487e8a9c7"]
      description:
        type: string
      enrichFieldGroups:
        items:
          $ref: '#/definitions/EnrichFieldGroup'
        type: array
      enrichments:
        items:
          type: string
        example: ["701db916-fc83-57ab-0000-000000000002"]
        type: array
      id:
        type: string
      metadata:
        $ref: '#/definitions/Metadata'
      name:
        type: string
        example: Sample Collection
      numReplicas:
        format: int32
        minimum: 1
        default: 1
        example: 1
        type: integer
      numShards:
        minimum: 1
        default: 1
        example: 1
        format: int32
        type: integer
      richDatasets:
        items:
          type: string
        type: array
      params:
        type: object
        properties:
          defaultOutput:
            type: object
            properties:
              echoParams:
                type: string
              wt:
                type: string
              indent:
                type: boolean
          select:
            type: object
            properties:
              df:
                type: string
          query:
            type: object
            properties:
              defType:
                type: string
              sow:
                type: boolean
              q.op:
                type: string
              bigram:
                type: string
              bigram.maxlength:
                type: integer
              df:
                type: string
              qf:
                type: string
              carrot.snippet:
                type: string
              carrot.title:
                type: string
          querymodifier:
            type: object
            properties:
              querymodifier.analysis:
                type: boolean
              querymodifier.minimumRequiredTerms:
                type: integer
              analysis.fieldtype:
                type: string
          highlighting:
            type: object
            properties:
              hl:
                type: boolean
              hl.method:
                type: string
              hl.requiredFieldMatch:
                type: boolean
              hl.snippets:
                type: integer
              hl.encoder:
                type: string
      tags:
        required:
          - defaultBodyFieldId
        properties:
          defaultBodyFieldId:
            type: string
            description: Field name displayed in summary in the miner UI.
          defaultDateFieldId:
            type: string
            description: Field name displayed as default date field in the miner UI.
          defaultTitleFieldId:
            type: string
            description: Field name displayed as title in the miner UI.
          studioEnabled:
            type: boolean
            description: Domain Adaptation Curator is enabled (true) or disabled(false)
          timezone:
            type: string
            description: Valid time zone of ```java.time.ZoneId```. Time series view in miner UI use this.
          selectedMetadataIds:
            type: array
            description: List offield names treated as metadata field.
            items:
              type: string
          flagOption:
            description: Document flags setting
            type: array
            items:
              $ref: '#/definitions/FlagOption'
          predictedFieldIds:
            type: array
            description: Internal use only.
            items:
              type: string
          predictedFields:
            type: array
            description: Internal use only.
            items:
              type: string
        additionalProperties:
          properties: {}
          type: object
        type: object
        example:
          "defaultBodyFieldId": "body"
          "defaultDateFieldId": "date_added"
          "defaultTitleFieldId": "id"
          "selectedMetadataIds": [
              "price",
              "title",
              "year"
            ]
          flagOption: {"flagEnabled":true,"flags":[{"id":0,"name":"Important","description":"Flag to indicates a document is important","colorCode":"#ff0000"},{"id":1,"name":"Attention","description":"A document need extra attention","colorCode":"#ffff00"}]}
          "predictedFieldIds": []
          "predictedFields": []
          "studioEnabled": false
          "timezone": "Asia/Tokyo"
    type: object
  MLCollection:
    example:
      enrichments:
        - 3dbf7d7d-b9d2-1180-0000-015ebc1331b3
      enrichFieldGroups:
        - fields:
            - body
          enrichments:
            - 3dbf7d7d-b9d2-1180-0000-015ebc1331b3
    required:
      - enrichments
      - enrichFieldGroups
    properties:
      description:
        type: string
      enrichFieldGroups:
        items:
          $ref: '#/definitions/EnrichFieldGroup'
        type: array
      enrichments:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  ListCollectionStatus:
    properties:
      items:
        $ref: '#/definitions/CollectionStatus'
  CollectionStatus:
    properties:
      collectionID:
        type: string
      docproc:
        type: object
        properties:
          collectionID:
            type: string
          datasets:
            type: array
            items:
              type: object
              properties:
                datasetID:
                  type: string
                numDocs:
                  type: integer
                  format: int64
                processedNumDocs:
                  type: integer
                  format: int64
                processedNumErrorDocs:
                  type: integer
                  format: int64
                processedNumRemovedDocs:
                  type: integer
                  format: int64
                processedNumRemovedErrorDocs:
                  type: integer
                  format: int64
                lastNumDocsUpdate:
                  type: integer
                  format: int64
                lastProcessedNumDocsUpdate:
                  type: integer
                  format: int64
                lastIngested:
                  type: integer
                  format: int64
                lastProcessed:
                  type: integer
                  format: int64
                job:
                  type: object
                  properties:
                    lastUpdate:
                      type: integer
                      format: int64
                    queuedDocuments:
                      type: integer
                      format: int64
                    completedDocuments:
                      type: integer
                      format: int64
                state:
                  type: string
          numberOfIndexedDocs:
            type: integer
            format: int64
          state:
            type: string
          completed:
            type: boolean
  ConfigurationParameter:
    properties:
      booleanInitialValue:
        type: boolean
      booleanValue:
        type: boolean
      cardinality:
        enum:
          - SINGLE
          - MULTIPLE
        type: string
      condition:
        $ref: '#/definitions/ConfigurationParameterCondition'
      description:
        type: string
      enumValues:
        items:
          $ref: '#/definitions/ConfigurationParameterEnum'
        type: array
      hidden:
        type: boolean
      initialValue:
        properties: {}
        type: object
      label:
        type: string
      listInitialValue:
        items:
          type: string
        type: array
      listValue:
        items:
          type: string
        type: array
      longInitialValue:
        format: int64
        type: integer
      longValue:
        format: int64
        type: integer
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/ConfigurationParameter'
        type: array
      required:
        type: boolean
      stringInitialValue:
        type: string
      stringValue:
        type: string
      type:
        enum:
          - STRING
          - BOOLEAN
          - INT
          - LONG
          - PASSWORD
          - DATE
          - TEXT
          - FILE
          - ENUM
          - LIST
          - ENUMLIST
          - SUBSECTION
        type: string
      value:
        properties: {}
        type: object
    type: object
  ConfigurationParameterCondition:
    properties:
      match:
        $ref: '#/definitions/ConfigurationParameterMatch'
    type: object
  ConfigurationParameterEnum:
    properties:
      label:
        type: string
      name:
        type: string
    type: object
  ConfigurationParameterMatch:
    properties:
      in:
        items:
          type: string
        type: array
      name:
        type: string
      value:
        type: string
    type: object
  ConfigurationSection:
    properties:
      cardinality:
        enum:
          - SINGLE
          - MULTIPLE
        type: string
      description:
        type: string
      hidden:
        type: boolean
      label:
        type: string
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/ConfigurationParameter'
        type: array
      titleParameter:
        type: string
    type: object
  ConfigurationTemplate:
    properties:
      description:
        type: string
      label:
        type: string
      name:
        type: string
      sections:
        items:
          $ref: '#/definitions/ConfigurationSection'
        type: array
    type: object
  ConfigurationType:
    properties:
      label:
        type: string
      name:
        type: string
    type: object
  ConverterConfiguration:
    properties:
      auxiliarySettings:
        $ref: '#/definitions/JsonNode'
      converterSettings:
        additionalProperties:
          properties: {}
          type: object
        type: object
      generalSettings:
        $ref: '#/definitions/GeneralSettings'
      name:
        type: string
    type: object
  ConverterError:
    properties:
      converterName:
        type: string
      errorMessage:
        type: string
      occurredTime:
        format: int64
        type: integer
      uri:
        type: string
    type: object
  ConverterPipelineConfiguration:
    properties:
      converterConfigurations:
        items:
          $ref: '#/definitions/ConverterConfiguration'
        type: array
    type: object
  ConverterPipelineStatus:
    properties:
      documentNum:
        format: int64
        type: integer
      errorNum:
        format: int64
        type: integer
      errors:
        items:
          $ref: '#/definitions/ConverterError'
        type: array
      inputNum:
        format: int64
        type: integer
      outputNum:
        format: int64
        type: integer
      publishedNum:
        format: int64
        type: integer
      status:
        enum:
          - Waiting
          - Running
          - Stopped
          - Unknown
          - Errored
        type: string
    type: object
  Crawler:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
      lastModified:
        format: int64
        type: integer
    type: object
  CrawlerConfiguration:
    description: Each crawler type has it's specific properties.
    properties:
      crawlerType:
        type: string
      crawl_settings:
        description: >-
          Defined in each crawler template. See GET
          /api/v1/crawler/types/{crawlerTypeName}
        type: object
      crawlspace_settings:
        description: >-
          Defined in each crawler template. See GET
          /api/v1/crawler/types/{crawlerTypeName}
        items:
          type: object
        type: array
      datasource_settings:
        description: >-
          Defined in each crawler template. See GET
          /api/v1/crawler/types/{crawlerTypeName}
        type: object
      general_settings:
        description: >-
          Defined in each crawler template. See GET
          /api/v1/crawler/types/{crawlerTypeName}
        type: object
      plugin_settings:
        description: >-
          Defined in each crawler template. See GET
          /api/v1/crawler/types/{crawlerTypeName}
        type: object
      schedules:
        items:
          $ref: '#/definitions/Schedule'
        type: array
    example:
      crawlerType: ac-crawler-seed-unixfscrawler
      crawl_settings: {}
      crawlspace_settings:
        - label: /home/node
          path:
            - /home/node
          subdirectory_level: '-1'
          rank_date: modified_date
          extensions: excluded
          excluded_extensions: []
          included_extensions: []
          character_set_auto_detection: true
          character_set: UTF-8
          id: ff5a6769-c507-4892-b4a7-6d1ed9d06f42
          target: /home/node
      datasource_settings: {}
      general_settings:
        crawler_name: crawler1
        start_mode: NORMAL
      plugin_settings: {}
      schedules: []
  CrawlerStatus:
    properties:
      crawlspaceStatus:
        items:
          $ref: '#/definitions/CrawlspaceStatus'
        type: array
      errorMessage:
        type: string
      status:
        enum:
          - Waiting
          - Crawling
          - Stopped
          - Completed
          - Errored
          - Unknown
        type: string
      total:
        format: int64
        type: integer
    type: object
  CrawlspaceStatus:
    properties:
      crawled:
        format: int64
        type: integer
      deleted:
        format: int64
        type: integer
      endTime:
        format: int64
        type: integer
      errorMessage:
        type: string
      inserted:
        format: int64
        type: integer
      name:
        type: string
      startTime:
        format: int64
        type: integer
      status:
        enum:
          - Waiting
          - Crawling
          - Completed
          - Errored
          - Unknown
        type: string
      updated:
        format: int64
        type: integer
    type: object
  Currency:
    properties:
      currencyCode:
        type: string
      defaultFractionDigits:
        format: int32
        type: integer
      displayName:
        type: string
      numericCode:
        format: int32
        type: integer
      symbol:
        type: string
    type: object
  Dataset:
    properties:
      dateFieldFormat:
        $ref: '#/definitions/DateFieldFormat'
      description:
        type: string
      fields:
        items:
          $ref: '#/definitions/Field'
        type: array
      id:
        type: string
      mappedFields:
        additionalProperties:
          additionalProperties:
            type: string
          type: object
        type: object
      metadata:
        $ref: '#/definitions/Metadata'
      name:
        type: string
      nativeFields:
        additionalProperties:
          items:
            $ref: '#/definitions/Field'
          type: array
        type: object
      tags:
        additionalProperties:
          properties: {}
          type: object
        type: object
    type: object
  DatasetConfig:
    properties:
      config:
        description: >-
          Map of properties that can be passed to training process as arguments.
          Should start with *flag.*
        additionalProperties:
          type: string
        type: object
      description:
        description: User-provided description
        type: string
      id:
        description: ID
        type: string
      keptMLDatasets:
        description: Type of datasets specified to be kept by users
        items:
          enum:
            - TRAINING
            - TEST
            - VALIDATION
          type: string
        type: array
      metadata:
        description: (Used by system)
        type: object
      name:
        description: Name
        type: string
      tags:
        description: (Used by system)
        additionalProperties:
          properties: {}
          type: object
        type: object
      testRatio:
        description: Ratio of test set to divide the source dataset
        format: int32
        type: integer
      trainingRatio:
        description: Ratio of training set to divide the source dataset
        format: int32
        type: integer
      validationRatio:
        description: Ratio of validation set to divide the source dataset
        format: int32
        type: integer
    type: object
  InitDatasetConfig:
    example:
      trainingRatio: 8
      testRatio: 1
      validationRatio: 1
      config:
        flag.batch_size: "128"
        flag.max_steps: "10000"
        flag.val_monitor_every_n_steps: "200"
        flag.val_monitor_early_stopping_rounds: "3"
        flag.early_stopping_improvement_ratio: "0.00001"
        flag.predictions_visible: "True"
        flag.weights_visible: "True"
    properties:
      config:
        description: |
          Map of properties that can be passed to training process as arguments.
          Should start with *flag.*
          This will be passed to model's config when model creation started by `POST /api/v1/labelers/{labelerId}/models/all`
        additionalProperties:
          type: string
        type: object
      description:
        description: Description
        type: string
      keptMLDatasets:
        description: Type of datasets specified to be kept by users
        items:
          enum:
            - TRAINING
            - TEST
            - VALIDATION
          type: string
        type: array
      keptRichDocListResourceIds:
        description: Mapping type of dataset to fileResourceId (Containing list of document's id) specified to be kept by users
        items:
          type: string
        type: object
      name:
        description: Name
        type: string
      testRatio:
        description: Ratio of test set to divide the source dataset
        format: int32
        type: integer
      trainingRatio:
        description: Ratio of training set to divide the source dataset
        format: int32
        type: integer
      validationRatio:
        description: Ratio of validation set to divide the source dataset
        format: int32
        type: integer
    type: object
  DateFieldFormat:
    properties:
      dateFormats:
        items:
          type: string
        type: array
      localeString:
        type: string
      timeZoneId:
        type: string
    type: object
  DiscoveredSubspace:
    properties:
      availableAsCrawlSpace:
        type: boolean
      availableAsNodeSpace:
        type: boolean
      filters:
        items:
          $ref: '#/definitions/ConfigurationParameter'
        type: array
      label:
        type: string
      name:
        type: string
      path:
        items:
          type: string
        type: array
    type: object
  Document:
    properties:
      fields:
        $ref: '#/definitions/MultiFieldMap'
      groupId:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/MultiFieldMap'
      removed:
        type: boolean
      tag:
        type: string
    type: object
  EnrichFieldGroup:
    properties:
      enrichments:
        items:
          type: string
        type: array
      fields:
        items:
          type: string
        type: array
    type: object
  Enrichment:
    properties:
      annotationIndexingSpecs:
        $ref: '#/definitions/AnnotationIndexingSpecs'
      category:
        $ref: '#/definitions/Category'
      description:
        type: string
      facetDictionaries:
        items:
          type: string
        type: array
      fileResources:
        items:
          type: string
        type: array
      id:
        type: string
      labelerId:
        type: string
      metadata:
        $ref: '#/definitions/Metadata'
      modelId:
        type: string
      name:
        type: string
      tags:
        additionalProperties:
          properties: {}
          type: object
        type: object
      type:
        type: string
    type: object
  EntryType:
    properties:
      apply:
        type: boolean
        xml:
          attribute: true
      facet:
        items:
          $ref: '#/definitions/FacetType'
        type: array
      ignoreCase:
        type: boolean
        xml:
          attribute: true
      mtime:
        type: integer
        xml:
          attribute: true
      val:
        type: string
        xml:
          attribute: true
      word:
        items:
          $ref: '#/definitions/WordType'
        type: array
    required:
      - word
    type: object
  RegExConfig:
    type: object
    properties:
      regExMap:
        type: object
        additionalProperties:
          items:
            $ref: '#/definitions/RegExRule'
          type: array
  RegExRule:
    properties:
      name:
        type: string
      ruleId:
        type: string
      description:
        type: string
      pattern:
        type: string
      facetPath:
        type: string
      facetValue:
        type: string
      matchType:
        type: string
    type: object
  FacetDictionary:
    properties:
      entry:
        items:
          $ref: '#/definitions/EntryType'
        type: array
      lang:
        type: string
        xml:
          attribute: true
    type: object
    xml:
      name: facetDictionary
  FacetType:
    properties:
      path:
        type: string
        xml:
          attribute: true
    type: object
  Features:
    type: object
  Field:
    properties:
      name:
        type: string
      stats:
        $ref: '#/definitions/Stats'
      type:
        enum:
          - String
          - Long
          - Double
          - Date
        type: string
    type: object
  FileResource:
    properties:
      description:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/Metadata'
      name:
        type: string
      tags:
        additionalProperties:
          properties: {}
          type: object
        type: object
      type:
        type: string
    type: object
  FilterType:
    properties:
      featureValue:
        type: string
        xml:
          attribute: true
    type: object
  GeneralSettings:
    properties:
      converterName:
        type: string
      typeIn:
        items:
          type: string
        type: array
      typeOut:
        type: string
    type: object
  Testit:
    type: string
  Importer:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
      lastModified:
        format: int64
        type: integer
    type: object
  IndexingConfig:
    properties:
      enabled:
        type: boolean
    type: object
  IngestionStatusSummary:
    properties:
      numDocs:
        format: int64
        type: integer
      datasetID:
        type: string
      lastDatasetUpdate:
        format: int64
        type: integer
      state:
        type: string
      status:
        enum:
          - NotStarted
          - Started
          - Running
          - Stopped
          - Completed
          - Errored
        type: string
      zkIngestionStatus:
        items:
          $ref: '#/definitions/ZkIngestionStatus'
        type: array
    type: object
  InputStream:
    type: object
  IterableFacet:
    type: object
  JsonNode:
    properties:
      array:
        type: boolean
      bigDecimal:
        type: boolean
      bigInteger:
        type: boolean
      binary:
        type: boolean
      boolean:
        type: boolean
      containerNode:
        type: boolean
      double:
        type: boolean
      float:
        type: boolean
      floatingPointNumber:
        type: boolean
      int:
        type: boolean
      integralNumber:
        type: boolean
      long:
        type: boolean
      missingNode:
        type: boolean
      nodeType:
        enum:
          - ARRAY
          - BINARY
          - BOOLEAN
          - MISSING
          - 'NULL'
          - NUMBER
          - OBJECT
          - POJO
          - STRING
        type: string
      'null':
        type: boolean
      number:
        type: boolean
      object:
        type: boolean
      pojo:
        type: boolean
      short:
        type: boolean
      textual:
        type: boolean
      valueNode:
        type: boolean
    type: object
  Labeler:
    required:
      - '@type'
      - groundTruthLabelFacet
      - predictedLabelFacet
    properties:
      '@type':
        description: Required property to deserialize the JSON string correctly
        default: Labeler
        type: string
      configs:
        description: >-
          Settings to split the source dataset into training, validation, and
          test sets
        items:
          $ref: '#/definitions/DatasetConfig'
        type: array
      description:
        description: Description of the labeler
        type: string
      groundTruthLabelFacet:
        description: Name of the answer field that contains correct labels of a document
        type: string
      id:
        description: ID
        type: string
      metadata:
        description: (Used by system)
        type: object
      mlCollectionId:
        description: >-
          ID of the collection created by POST
          /api/v1/labelers/{labelerId}/collection
        type: string
      models:
        description: Labeler models
        items:
          $ref: '#/definitions/ClassifierModel'
        type: array
      name:
        description: Name
        type: string
      predictedLabelFacet:
        description: Name of the field that contains predicted labels given by this labeler
        type: string
      resources:
        description: Resource sets
        items:
          $ref: '#/definitions/ResourceSet'
        type: array
      sourceDatasetId:
        description: ID of the source dataset provided when creating this labeler
        type: string
      tags:
        description: (Used by system)
        additionalProperties:
          properties: {}
          type: object
        type: object
    type: object
  InitLabeler:
    required:
      - '@type'
      - groundTruthLabelFacet
      - predictedLabelFacet
      - sourceDatasetId
    example:
      '@type': Labeler
      name: my-labeler
      groundTruthLabelFacet: label
      predictedLabelFacet: predicted_label
      sourceDatasetId: 3dbf7d7d-b9d2-1180-0000-015e99d67863
    properties:
      '@type':
        description: Required property to deserialize the JSON string correctly
        default: Labeler
        type: string
      description:
        description: Description of the labeler
        type: string
      groundTruthLabelFacet:
        description: Name of the answer field that contains correct labels of a document
        type: string
      name:
        description: Name
        type: string
      predictedLabelFacet:
        description: Name of the field that contains predicted labels given by this labeler
        type: string
      sourceDatasetId:
        description: ID of the training dataset provided when creating this labeler
        type: string
    type: object
  Ranker:
    properties:
      fileResources:
        description: File resources used by this ranker intance
        items:
          type: string
        type: array
      id:
        description: ID
        type: string
      metadata:
        description: (Used by system)
        type: object
      modelId:
        description: Id of the ranker model
        type: string
      name:
        description: Name
        type: string
      rankerId:
        description: ID of the originated ranker
        type: string
      tags:
        description: (Used by system)
        additionalProperties:
          properties: {}
          type: object
        type: object
    type: object
  SDRanker:
    required:
      - '@type'
      - correctAnswerField
      - correctAnswerFieldType
    properties:
      '@type':
        description: Required property to deserialize the JSON string correctly
        default: SimilarDocumentRanker
        type: string
      configs:
        description: >-
          Settings to split the source dataset into training, validation, and
          test sets
        items:
          $ref: '#/definitions/DatasetConfig'
        type: array
      description:
        description: Description of the ranker
        type: string
      correctAnswerField:
        description: >-
          Name of the field that contains information to detect truly similar
          documents
        type: string
      correctAnswerFieldType:
        description: Type of the correct answer field
        type: string
        enum:
          - ID
          - ATTRIBUTE
      docIdField:
        description: >-
          User defined document ID field that is used when the value of
          correctAnswerFieldType is ID
        type: string
      id:
        description: ID
        type: string
      metadata:
        description: (Used by system)
        type: object
      mlCollectionId:
        description: ID of the collection storing the source dataset
        type: string
      models:
        description: Ranker models
        items:
          $ref: '#/definitions/ClassifierModel'
        type: array
      name:
        description: Name
        type: string
      resources:
        description: Resource sets
        items:
          $ref: '#/definitions/ResourceSet'
        type: array
      sourceDatasetId:
        description: ID of the source dataset
        type: string
      tags:
        description: (Used by system)
        additionalProperties:
          properties: {}
          type: object
        type: object
    type: object
  InitSDRanker:
    required:
      - '@type'
      - correctAnswerField
      - correctAnswerFieldType
      - sourceDatasetId
    example:
      '@type': SimilarDocumentRanker
      name: my-ranker
      correctAnswerField: similar-docs
      correctAnswerFieldType: ID
      docIdField: doc-id
      sourceDatasetId: 3dbf7d7d-b9d2-1180-0000-015e99d67863
    properties:
      '@type':
        description: Required property to deserialize the JSON string correctly
        default: SimilarDocumentRanker
        type: string
      description:
        description: Description of the ranker
        type: string
      correctAnswerField:
        description: >-
          Name of the field that contains information to detect truly similar
          documents
        type: string
      correctAnswerFieldType:
        description: Type of the answer field
        type: string
        enum:
          - ID
          - ATTRIBUTE
      docIdField:
        description: >-
          User defined document ID field that is used when the value of
          correctAnswerFieldType is ID
        type: string
      name:
        description: Name
        type: string
      sourceDatasetId:
        description: ID of the training dataset
        type: string
    type: object
  LabelerEvalResult:
    properties:
      labelWise:
        $ref: '#/definitions/LabelWiseClassifierMeasurements'
      macroAverage:
        $ref: '#/definitions/MacroAvgClassifierMeasurements'
      microAverage:
        $ref: '#/definitions/MicroAvgClassifierMeasurements'
      modelId:
        description: ID of the labeler model used for the evaluation
        type: string
    type: object
  LabelWiseClassifierMeasurements:
    description: Label-wise evaluation measurements
    properties:
      f1:
        description: F1-score
        format: double
        type: number
      precision:
        description: Precision
        format: double
        type: number
      recall:
        description: Recall
        format: double
        type: number
      tp:
        description: True positive
        format: int32
        type: number
      fp: 
        description: False positive
        format: int32
        type: number 
      fn:
        description: False negative
        format: int32
        type: number 
      tn:
        description: True negative
        format: int32
        type: number 
    type: object
  MacroAvgClassifierMeasurements:
    description: Macro-averaged (averaged over labels) evaluation measurements
    properties:
      f1:
        description: F1-score
        format: double
        type: number
      precision:
        description: Precision
        format: double
        type: number
      recall:
        description: Recall
        format: double
        type: number
    type: object
  MicroAvgClassifierMeasurements:
    description: Micro-averaged (averaged over documents) evaluation measurements
    properties:
      f1:
        description: F1-score
        format: double
        type: number
      precision:
        description: Precision
        format: double
        type: number
      recall:
        description: Recall
        format: double
        type: number
    type: object
  RankerEvalResult:
    properties:
      topK:
        description: Evaluation measurements using top-K documents of the ranking
        type: array
        items:
          $ref: '#/definitions/RankerMeasurements'
      map:
        description: Mean average precision
        format: double
        type: number
      modelId:
        description: ID of the labeler model used for the evaluation
        type: string
    type: object
  RankerMeasurements:
    properties:
      k:
        description: >-
          Number of documents from the top of the ranking used for the
          evaluation
        format: int32
        type: number
      foundInTopK:
        description: >-
          Ratio of queries whose one or more correct documents are found in
          Top-K result
        format: double
        type: number
    type: object
  ClassifierModel:
    properties:
      checkpointFileResourceId:
        description: (Used by system)
        type: string
      creationEndTime:
        description: Timestamp when the model creation ends
        format: int64
        type: integer
      creationStartTime:
        description: Timestamp when the model creation starts
        format: int64
        type: integer
      config:
        description: Map of properties that can be passed to training process as arguments
        additionalProperties:
          type: string
        type: object
      description:
        description: User-provided description
        type: string
      id:
        description: ID
        type: string
      initializedTime:
        description: Timestamp when the model is initialized
        format: int64
        type: integer
      l1RegularizationStrength:
        description: L1 regularization strength
        format: float
        type: number
      l2RegularizationStrength:
        description: L2 regularization strength
        format: float
        type: number
      learningRate:
        description: Learning rate
        format: float
        type: number
      metadata:
        description: (Used by system)
        type: object
      modelFileResourceId:
        description: (Used by system)
        type: string
      name:
        description: Name
        type: string
      probThreshold:
        description: Threshold of probabilities to output predicted labels
        format: float
        type: number
      resourceSetId:
        description: ID of the resource set used to train this model
        type: string
      state:
        description: Current state of this model
        enum:
          - INITIAL
          - CREATING_DATASETS
          - FAILED_TO_CREATE_DATASETS
          - CREATING_RESOURCES
          - FAILED_TO_CREATE_RESOURCES
          - TRAINING
          - FAILED_TO_TRAIN
          - EVALUATING
          - FAILED_TO_EVALUATE
          - READY_TO_DEPLOY
        type: string
      tags:
        description: (Used by system)
        additionalProperties:
          properties: {}
          type: object
        type: object
      testEvalResultFileResourceId:
        description: (Used by system)
        type: string
      trainingHistory:
        description: History of loss values during the training
        items:
          $ref: '#/definitions/ValidationMetrics'
        type: array
      validationEvalResultFileResourceId:
        description: (Used by system)
        type: string
      deployableFileResources:
        description: (Used by system)
        items:
          type: string
        type: array
    type: object
  ClassifierModelStatus:
    properties:
      state:
        enum:
          - INITIAL
          - CREATING_DATASETS
          - FAILED_TO_CREATE_DATASETS
          - CREATING_RESOURCES
          - FAILED_TO_CREATE_RESOURCES
          - TRAINING
          - FAILED_TO_TRAIN
          - EVALUATING
          - FAILED_TO_EVALUATE
          - READY_TO_DEPLOY
        type: string
      creationProgressOfCurrentStage:
        type: number
    type: object
  ListDiscoveredSubspaces:
    properties:
      items:
        items:
          $ref: '#/definitions/DiscoveredSubspace'
        type: array
    type: object
  ListResponseCollection:
    properties:
      items:
        items:
          $ref: '#/definitions/Collection'
        type: array
    type: object
  ListResponseConfigurationType:
    properties:
      items:
        items:
          $ref: '#/definitions/ConfigurationType'
        type: array
    type: object
  ListResponseDataset:
    properties:
      items:
        items:
          $ref: '#/definitions/Dataset'
        type: array
    type: object
  ListResponseEnrichment:
    properties:
      items:
        items:
          $ref: '#/definitions/Enrichment'
        type: array
    type: object
  ListResponseFileResource:
    properties:
      items:
        items:
          $ref: '#/definitions/FileResource'
        type: array
    type: object
  ListResponseCrawler:
    properties:
      items:
        items:
          $ref: '#/definitions/Crawler'
        type: array
    type: object
  ListResponseTestit:
    items:
      $ref: '#/definitions/Testit'
    type: array
  ListResponseImporter:
    properties:
      items:
        items:
          $ref: '#/definitions/Importer'
        type: array
    type: object
  ListResponseIngestionStatusSummary:
    properties:
      items:
        items:
          $ref: '#/definitions/IngestionStatusSummary'
        type: array
    type: object
  ListResponseLabeler:
    properties:
      items:
        items:
          $ref: '#/definitions/Labeler'
        type: array
    type: object
  ListResponseLabelerEvalResult:
    properties:
      items:
        items:
          $ref: '#/definitions/LabelerEvalResult'
        type: array
    type: object
  ListResponseRanker:
    properties:
      items:
        items:
          $ref: '#/definitions/Ranker'
        type: array
    type: object
  ListResponseSDRanker:
    properties:
      items:
        items:
          $ref: '#/definitions/SDRanker'
        type: array
    type: object
  ListResponseRankerEvalResult:
    properties:
      items:
        items:
          $ref: '#/definitions/RankerEvalResult'
        type: array
    type: object
  ListResponseString:
    properties:
      items:
        items:
          type: string
        type: array
    type: object
  Metadata:
    properties:
      lastModified:
        format: int64
        type: integer
        example: 1531288825136
    type: object
  MultiFieldMap:
    properties:
      empty:
        type: boolean
    type: object
  Number:
    type: object
  PathComponentType:
    properties:
      featurePath:
        type: string
        xml:
          attribute: true
      literal:
        type: string
        xml:
          attribute: true
      normalization:
        type: string
        xml:
          attribute: true
    type: object
  PreviewResult:
    properties:
      header:
        items:
          type: string
        type: array
      rows:
        items:
          items:
            type: string
          type: array
        type: array
    type: object
  QueryResult:
    properties:
      responseHeader:
        properties:
          params:
            type: object
        type: object
      response:
        properties:
          numFound:
            format: int64
            type: integer
            example: 1
          start:
            format: int64
            type: integer
            example: 0
          docs:
            description: List of result documents.
            type: object
            example:
              id: 'csv://sample_data.csv?id=XYZ'
              body: >-
                IBM Watson Explorer is a cognitive search and content analysis
                platform that enables you to gain insights from your data.
      facet_counts:
        properties:
          facet_fields:
            type: object
        type: object
      facet_stats:
        properties:
          dims:
            type: object
          stats:
            type: object
        type: object
      highlighting:
        description: List of text snippets including query matches.
        type: object
        example:
          'csv://sample_data.csv?id=XYZ':
            body:
              - >-
                <em>IBM Watson Explorer</em> is a cognitive search and content
                analysis platform that enables you to gain insights from your
                data.
    type: object
  ResourceSet:
    properties:
      creationEndTime:
        description: Timestamp when the resource set creation ends
        format: int64
        type: integer
      creationStartTime:
        description: Timestamp when the resource set creation starts
        format: int64
        type: integer
      description:
        description: User-provided description
        type: string
      docidListResourceId:
        description: (Used by system)
        type: string
      featureListResourceId:
        description: (Used by system)
        type: string
      featureSamplingRate:
        description: (Used by system)
        format: double
        type: number
      featureSize:
        description: Size of features
        format: int32
        type: integer
      featureThreshold:
        description: Threshold of occurrences to eliminate features
        format: int32
        type: integer
      id:
        description: ID
        type: string
      initializedTime:
        description: Timestamp when the resource set is initialized
        format: int64
        type: integer
      labelListResourceId:
        description: (Used by system)
        type: string
      labels:
        description: A set of labels that the labeler can return
        items:
          type: string
        type: array
      labelSamplingRate:
        description: (Used by system)
        format: double
        type: number
      labelThreshold:
        description: Threshold of occurrences to eliminate labels
        format: int32
        type: integer
      metadata:
        description: (Used by system)
        type: object
      name:
        description: Name
        type: string
      state:
        description: Current status of this resource set
        enum:
          - INITIAL
          - CREATING_DATASETS
          - FAILED_TO_CREATE_DATASETS
          - CREATING
          - FAILED_TO_CREATE
          - READY_TO_TRAIN_MODELS
          - REFERENCE
        type: string
      tags:
        description: (Used by system)
        additionalProperties:
          properties: {}
          type: object
        type: object
      testDataResourceId:
        description: (Used by system)
        type: string
      testDataSetId:
        description: (Used by system)
        type: string
      testDataSize:
        description: Number of documents in the test dataset
        format: int32
        type: integer
      testRichDataSetId:
        description: (Used by system)
        type: string
      trainingDataResourceId:
        description: (Used by system)
        type: string
      trainingDataSetId:
        description: (Used by system)
        type: string
      trainingDataSize:
        description: Number of documents in the training dataset
        format: int32
        type: integer
      trainingRichDataSetId:
        description: (Used by system)
        type: string
      validationDataResourceId:
        description: (Used by system)
        type: string
      validationDataSetId:
        description: (Used by system)
        type: string
      validationDataSize:
        description: Number of documents in the validation dataset
        format: int32
        type: integer
      validationRichDataSetId:
        description: (Used by system)
        type: string
    type: object
  RichDocument:
    properties:
      enriched:
        additionalProperties:
          items:
            $ref: '#/definitions/RichField'
          type: array
        type: object
      id:
        type: string
      metadata:
        additionalProperties:
          items:
            properties: {}
            type: object
          type: array
        type: object
      removed:
        type: boolean
      stored:
        additionalProperties:
          items:
            properties: {}
            type: object
          type: array
        type: object
      tag:
        type: string
    type: object
  RichField:
    properties:
      annotations:
        items:
          $ref: '#/definitions/Annotation'
        type: array
      facets:
        $ref: '#/definitions/IterableFacet'
      features:
        items:
          $ref: '#/definitions/Features'
        type: array
      properties:
        additionalProperties:
          type: string
        type: object
      text:
        type: string
    type: object
  Schedule:
    properties:
      enabled:
        type: boolean
      scheduleType:
        type: string
      startOn:
        type: string
      updateInterval:
        $ref: '#/definitions/UpdateInterval'
    type: object
  Stats:
    properties:
      count:
        $ref: '#/definitions/Number'
      max:
        $ref: '#/definitions/Number'
      min:
        $ref: '#/definitions/Number'
      sum:
        $ref: '#/definitions/Number'
      cardinality:
        $ref: '#/definitions/Number'
    type: object
  UpdateInterval:
    properties:
      dates:
        type: string
      days:
        type: string
      intervalDays:
        format: int32
        type: integer
      intervalHours:
        format: int32
        type: integer
      intervalMinutes:
        format: int32
        type: integer
      timeOfDay:
        type: string
      type:
        type: string
    type: object
  UploadResult:
    properties:
      id:
        type: string
      uploadedFiles:
        items:
          type: string
        type: array
  ValType:
    properties:
      val:
        type: string
        xml:
          attribute: true
    type: object
  ValidationMetrics:
    properties:
      iteration:
        format: int32
        type: integer
      loss:
        format: float
        type: number
      timestamp:
        format: int64
        type: integer
      fields: 
        type: object
    type: object
  WordType:
    properties:
      ftr:
        items:
          $ref: '#/definitions/ValType'
        type: array
      lemma:
        $ref: '#/definitions/ValType'
      mtime:
        type: integer
        xml:
          attribute: true
      pos:
        type: string
        xml:
          attribute: true
      surface:
        items:
          $ref: '#/definitions/ValType'
        type: array
    required:
      - surface
    type: object
  ZkIngestionStatus:
    properties:
      active:
        type: boolean
      lastModified:
        format: int64
        type: integer
      status:
        $ref: '#/definitions/IngestionStatus'
    type: object
  User:
    required:
      - username
    properties:
      username:
        type: string
        description: >-
          if "authenicator" is external LDAP note that the username needs to be
          present in the external LDAP server and should be checked during the
          "signUp" function implementation, by prompting the user to enter their
          LDAP password (which should not be signed).
      authenticator:
        type: string
        description: >-
          when an external LDAP is hooked up, this option can be used to decide
          how to login the user. If external LDAP - then the username/password
          can be supplied to that ldap server to validate, else validated by our
          own internal 1-way hash.  When an external LDAP is setup,  Sign-ups
          can only be external LDAP usernames.  The internal mechanism can be
          used by Admins to add individual users not present in their LDAP, say
          usernames with fixed passwords or test users or even "functional
          IDS"/service keys.
        enum:
          - default
          - external
      password:
        type: string
        description: >-
          transient information, not persisted in the repo. Only the hash is
          (and that too not if an External LDAP user)
      salt:
        type: string
        description: >-
          random string generated and used to create the hash. The username,
          salt and password together would be used to generate the hash. Every
          password set/change for every user will result in a different salt -
          so even if you choose the same password, the hash will be different.
      password_hash:
        type: string
        description: >-
          This is a 1-way hash. We will not even store this hash for an external
          LDAP user
      role:
        type: string
        description: >-
          only two roles for now. The out-of-the-box user would be the first
          admin and non-deletable too.
        enum:
          - Admin
          - User
      email:
        type: string
        description: might be useful for reset password etc.
      default_user:
        type: string
        description: not to be deleted
      created_timestamp:
        type: number
        description: milliseconds from epoch. tracks when  this record was created
      last_modified_timestamp:
        type: number
        description: milliseconds from epoch. tracks when  this record was last updated
      approval_status:
        type: string
        description: tracks this user's sign up request status
        enum:
          - pending
          - approved
          - denied
      current_account_status:
        type: string
        description: >-
          tracks if the user has been locked out or if his account is still
          active
        enum:
          - locked
          - enabled
      release_lock_at_timestamp:
        type: number
        description: >-
          milliseconds from epoch. Tracks when the user will be allowed to log
          back in. i.e.  a subsequent login attempt will cause the locked state
          to automatically switch to enabled if the 'penalty' time has elapsed.
      first_failed_attempt_timestamp:
        type: number
        description: milliseconds from epoch
      recent_number_of_failed_attempts:
        type: number
        description: >-
          represents the number of attempts the user has tried to login
          recently. If the user has had > 5 attempts in the last 5 minutes, the
          lock status would be set to 3
      default_auth_jwt_token:
        type: string
        description: deprecated
      groups:
        description: List of group name user belongs to
        type: array
        items:
          type: string
  SizeInfo:
    properties:
      id:
        type: string
        description: |
          ID of the object.
          - Dataset ID if type is dataset
          - Collectio ID if type is nlp
        example: 3dbf7d7d-b9d2-1180-0000-015e3aea2653
      size:
        format: int64
        type: integer
        description: size of the object
        example: 100000
      timestamp:
        format: int64
        type: integer
        description: timestamp for this information
        example: 1507195612368
  SizeList:
    properties:
      total:
        format: int64
        type: integer
        description: total size of datasets or total count of NLP calls
        example: 100000
      limit:
        format: int64
        type: integer
        description: |
          Total size of all objects in bytes.  0 if no limits applied
        example: 0
      items:
        type: array
        items:
          $ref: '#/definitions/SizeInfo'
  SystemUsage:
    type: object
    properties:
      datasetMetrics:
        type: object
        properties:
          totalSize:
              format: int64
              type: integer
          limit:
              format: int64
              type: integer
          datasets:
              type: array
              items:
                type: object
                properties:
                  dsid:
                    type: string
                  size:
                    type: integer
                    format: int64
                  lastUpdate:
                    type: integer
                    format: int64

      nlpMetrics:
        type: object
        properties:
          totalCount:
            type: integer
            format: int64
          totalInputSize:
            type: integer
            format: int64
          totalOutputSize:
            type: integer
            format: int64
          collections:
            type: array
            items:
              type: object
              properties:
                cid:
                  type: string
                count:
                  type: integer
                  format: int64
                inputSize:
                  type: integer
                  format: int64
                outputSize:
                  type: integer
                  format: int64
                lastUpdate:
                  type: integer
                  format: int64
  NLPDocument:
    type: object
    required:
      - fields
    properties:
      fields:
        type: object
        example:
          body: >-
            IBM Watson Explorer is a cognitive search and content analysis
            platform that enables you to gain insights from your data.
          content: >-
            Watson Explorer introduces oneWEX, a truly unified architecture
            that combines both exploration and content analytics.
      metadata:
        type: object
        example: {}
  ErrorResponse:
    properties:
      message:
        type: string
      code:
        type: string
    type: object
  IngestionErrorResponse:
    properties:
      apiVersion:
        type: string
      message:
        type: string
      reason:
        type: string
      metadata:
        type: object
    type: object
  SimpleResponse:
    properties:
      success:
        type: boolean
    type: object
  LogRecords:
    type: array
    items:
      $ref: '#/definitions/LogRecord'
  LogRecord:
    type: object
    properties:
      level:
        type: string
        enum:
          - INFO
          - WARNING
          - SEVERE
          - FINE
          - FINER
          - FINEST
        example: INFO
      message:
        type: string
        description: Formatted message
        example: User has logged in.
      processId:
        type: integer
        example: 203
        description: process ID
      userName:
        type: string
        example: admin
        description: User name
      timestamp:
        type: string
        description: 'timestamp in "yyyy-MM-dd''T''HH:mm:ss.SSSZ"'
        example: '2017-10-09T04:24:18.000+0000'
  UserGroup:
    type: object
    required:
      - name
    properties:
      id:
        description: Machine generated ID
        type: integer
        example: 1000
      name:
        type: string
        example: group_A
      description:
        type: string
        example: Users in division A


  ExportRequest:
    type: object
    required:
      - query
    properties:
      query:
        type: string
        example: '*:*'
        description: Query to specify documents to be exported
      fields:
        type: object
        description: |
          Map of the fields to be exported.
          - CSV : Empty value makes field as column or name of the dimension table.
          - JSON: Ignored
        additionalProperties: {}
        example:
          body: ""
          date_added: ""
          product_name: "pname.csv"
      facets:
        type: object
        description: |
          Map of the facets to be exported.
          - CSV : Must be a name of the dimension table.
          - JSON: Ignored
          Note: Only facets on exported fields will be exported.
        additionalProperties: {}
        example:
          '._word.' : word.csv
      options:
        type: object
        description: Exporter options
        properties:
          'export.date.format':
            type: string
            description: |
              Pattern of java.time.format.DateTimeFormatter to format date fields.
              null indicates to format in epoch.
            example: yyyy-MM-dd
            default: null
          'export.locale':
            type: string
            description: Locale to format date
            default: en
          'export.timezone':
            type: string
            description: Timezone to format date
            default: GMT
          'csv.encapsulator':
            type: string
            description: CSV quote character
            default: \"
          'csv.escape':
            type: string
            description: CSV escape character
            default: \\
          'csv.separator':
            type: string
            description: CSV column separator char
            default: ","
          'csv.newline':
            type: string
            description: CSV line separator char
            default: \r\n
        additionalProperties: {}
        example:
          'export.date.format': "G yyyy-MM-dd"
          'export.locale': ja
          'export.timezone': Asia/Tokyo
      encoding:
        type: string
        description: Encoding of the output files
        default: UTF-8
        example: UTF-8
      tag:
        type: string
        description: Extra tag to filter jobs
      outputType:
        type: string
        description: Output plugin type
        default: CSV
        enum:
          - CSV
          - JSON

  ExportResponse:
    type: object
    properties:
      fileSize:
        type: number
        description: Size of the exported file
        example: 10000
      startTime:
        type: number
        description: Submitted time in epoch
      endTime:
        type: number
        description: Submitted time in epoch
      documentSize:
        type: number
        description: Number of documents exported
        example: 800
      facetSize:
        type: number
        description: (optional) Number of documents facets
        example: 6000
      cause:
        type: string
        description: Exception message if failed unexpectedly
      fileResourceId:
        type: string
        description: File resource ID

  ExportStatus:
    type: object
    properties:
      id:
        type: string
        description: Job ID
        example: 0
      lastModified:
        type: number
        description: Last modified time in epoch (ms)
        example: 1527576542271
      tags:
        description: System generated and user tags.
        type: array
        items:
          type: string
        example:
          - "cid: col1"
          - "type: exporter"
          - "user: My tags"
      state:
        description: State of the job
        example: Success
        type: string
        enum:
          - Running
          - Queued
          - Success
          - Error
          - NotFound
      result:
        $ref: '#/definitions/ExportResponse'

  ConfigFile:
    type: object
    properties:
      name:
        type: string
        description: File name
      encoded:
        type: boolean
        description: File is encoded while last operation or not.
      size:
        type: number
        description: File size
      sha51:
        type: string
        description: Hash of the file.
    example:
      name: custom_ldap_config.xml
      sha512: ecb39a69818661553e5c41dffdc61b2a702e62c6841c741832fc30cf0728d1fc90b19ad0fdb7548790c85b0c83c5e212712e1c7fa3b8998072c08766c7c33f4d
      size: 338

  GroupPattern:
    type: object
    required:
      - pattern
    properties:
      pattern:
        type: string
        description: Patten text of java.util.regex.Pattern
      allow:
        default: true
        type: boolean
        description: |
          true: User with group match this patten is Admin
          false: User with group match this patten is User
      role:
        type: string
        enum:
          - Admin
          - User
          - ToolUser
          - AppUser
        description: |
          A group applied for the user mathced by the pattern.
          If this value is specified, 'allow' is ignored.
  FlagDefinition:
    type: object
    required:
      - id
      - name
      - description
      - colorCode
    properties:
      id:
        description: ID of the flag. Should be unique in the list.
        type: integer
        minimum: 0
        maximum: 63
      name:
        type: string
      description:
        type: string
      colorCode:
        type: string
        description:  >
          Color of the flag.
          Should be [valid simple color](https://www.w3.org/TR/html51/infrastructure.html#valid-simple-color).
  FlagOption:
    type: object
    description: Document flag options
    required:
      - flagEnabled
      - flags
    properties:
      flagEnabled:
        type: boolean
        default: false
      flags:
        description: List of flags
        type: array
        items:
          $ref: '#/definitions/FlagDefinition'

parameters:
  collectionIdParam:
    name: collectionId
    in: path
    description: The ID of the collection.
    type: string
    required: true
  datasetIdParam:
    name: datasetId
    in: path
    description: The ID of the dataset.
    type: string
    required: true
  crawlerIdParam:
    name: crawlerId
    in: path
    description: The ID of the crawler.
    type: string
    required: true
  dictionaryIdParam:
    name: dictionaryId
    in: path
    description: The ID of the dictionary.
    type: string
    required: true
  enrichmentIdParam:
    name: enrichmentId
    in: path
    description: The ID of the enrichment.
    type: string
    required: true
  fileResourceIdParam:
    name: fileResourceId
    in: path
    description: The ID of the file resource.
    type: string
    required: true
  fileNameParam:
    name: fileName
    in: path
    description: The name of file.
    type: string
    required: true
  importerIdParam:
    name: importerId
    in: path
    description: The ID of the importer.
    type: string
    required: true
  labelerIdParam:
    name: labelerId
    in: path
    description: The ID of the labeler.
    type: string
    required: true
  modelIdParam:
    name: modelId
    in: path
    description: The ID of the model.
    type: string
    required: true
  resourceSetIdParam:
    name: resourceSetId
    in: path
    description: The ID of the resource set.
    type: string
    required: true
  rankerIdParam:
    name: rankerId
    in: path
    description: The ID of the ranker.
    type: string
    required: true
  rankerInstanceIdParam:
    name: rankerInstanceId
    in: path
    description: The ID of the ranker instance.
    type: string
    required: true
  uploadIdParam:
    name: uploadId
    in: path
    description: The ID of the upload request.
    type: string
    required: true

  jobIdParam:
    name: jobId
    in: path
    description: The ID of the job.
    type: string
    required: true
